{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is PTP? Picture Transfer Protocol was drafted in 2000 to create a standardized vendor-extensible image and file transfer protocol for digital cameras and printers. This effort was led by PIMA and many other camera manufacturers who, at the time, needed a universal protocol for transfering images from a camera to a computer over USB. At the time every company needed to invest in not only creating their own proprietary protocol, but creating drivers and software for their users. Like many file transfer protocols at the time, PTP doesn't expose a filesystem. Instead, it exposes a generic API for listing, downloading, and uploading objects . An 'object' can be anything, but in most cases it represents a file or folder on the device's storage medium. There's a few reasons why PTP was designed this way: Abstracting away the filesystem allowed the camera to store images in any way it liked (even without a filesystem) Removed the risk of filesystem corruption Allows the camera to safely modify objects while the client is downloading/uploading data PTP is also simple and vendor-extensible. This allows OS developers to create clients that can communicate with any camera, while camera manufacturers can add additional functionality on top of PTP without breaking compatibility with all clients. In 2005 PTP was standardized. It was updated in 2008 , and again in 2013 with new features to improve performance. In 2011, Microsoft released MTP as a superset of PTP with many more features and data types. The MTP spec is freely available and well-written, and is great documentation for anybody who wants to write a client. How does it work? PTP starts with the initiator , or the client. This is the device that issues commands to the responder , which can be a camera, printer, or phone. The initiator can issue commands such as OpenSession or GetDeviceInfo , and the responder will reply back with a a return code, parameters, payload, etc. Another important thing to understand is that PTP transactions consist of phases . A typical transaction will consist of a request phase , an (optional) data phase , and a response phase . The operation phase will always consist of a single request packet sent from the initiator . The data phase can consist of a data packet sent from either the initiator or responder, depending on the operation. The response phase will always consist of a single response packet. For example, an operation like GetDeviceInfo will consist of data received from the responder, while an operation like SetDevicePropValue will have data sent from the initiator. Note that the initiator and responder cannot both send data in the same transaction . PtpOpenSession Let's look at a very simple transaction from the viewpoint of the initiator. Here is the first packet we will send to the responder, after a USB connection is established: 10 00 00 00 01 00 02 10 01 00 00 00 00 00 00 00 Keep in mind that PTP data structures are encoded as little endian, and fields may not be aligned. This might be easier to look at if we encode it as a C struct. struct PtpContainer { uint32_t length; uint16_t type; uint16_t code; uint32_t transaction_id; uint32_t params[5]; }command = { .length = 16, .type = 1, .code = 0x1002, .transaction_id = 0, .params = { 0 } }; Generally the first request sent to the device will be PtpOpenSession or 0x1002 . This opens a session with the responder. A session is a connection between the initator and responder. Each session has it's own state, transaction IDs, object IDs, and descriptors. The only command allowed outside a session is GetDeviceInfo . PTP is designed this way to allow multiple concurrent sessions from different initiators. Sadly, it doesn't seem like any PTP device supports this feature. Since this packet is sent in the request phase , the type field for this packet is PTP_PACKET_TYPE_COMMAND or 1 . A rule for PtpOpenSession : parameter 0 must contain the SessionID , a unique ID identifying a session. This can be whatever we want. Note that the length field is 16 . The minimium size of a request packet is 12 and the first parameter adds 4 bytes. There can be up to 5 parameters in a command packet. A rule for for PtpOpenSession : transaction_id will always be 0. The transaction ID is maintained by the initiator and incremented by 1 after every completed transaction. Since PtpOpenSession doesn't have a data phase, the response phase is next, with a PTP_PACKET_TYPE_RESPONSE packet ( 3 ) issued from the responder: 0c 00 00 00 03 00 01 20 01 00 00 00 Here we see the code field is 0x2001 or PTP_RC_OK . Keep in mind all PTP codes start with a prefix in the higher 16 bits. For response codes (RC) it's 0x20 , for operation codes (OC) it's 0x10 , etc. Since this is packet is part of the same transaction, the transaction ID is the same. Now, the transaction is over, and we will increment the client's internal transaction ID counter before issuing the next transaction. Another important thing to take note of is that even though all packets are labeled with a transaction ID, a transaction must be fully completed before others are issued (in each session). You cannot issue another transaction while one is in progress. If the transaction ID changes before the transaction is over, then something is wrong. PtpGetDeviceInfo Next, let's have our client send a PtpGetDeviceInfo request. This operation returns a data structure describing the device we are communicating with. Here is the request packet we will send to the responder: 0c 00 00 00 01 00 01 10 02 00 00 00 The transaction id field is now 2 , and the code field is now set to 0x1001 . When we read data from the responder, we should get both a data packet ( PTP_PACKET_TYPE_DATA ) and a response packet ( PTP_PACKET_TYPE_RESPONSE ), in that order. The data packet is big, but is easy to decode: 00000000 0b 02 00 00 02 00 01 10 01 00 00 00 64 00 06 00 |............d...| 00000010 00 00 64 00 00 00 00 a7 00 00 00 14 10 15 10 16 |..d.............| 00000020 10 01 10 02 10 03 10 06 10 04 10 01 91 05 10 02 |................| 00000030 91 07 10 08 10 03 91 09 10 04 91 0a 10 1b 10 07 |................| 00000040 91 0c 10 0d 10 0b 10 05 91 0f 10 06 91 10 91 27 |...............'| 00000050 91 0b 91 08 91 09 91 0c 91 0e 91 0f 91 15 91 14 |................| 00000060 91 13 91 16 91 17 91 20 91 f0 91 18 91 21 91 f1 |....... .....!..| 00000070 91 1d 91 0a 91 1b 91 1c 91 1e 91 1a 91 53 91 54 |.............S.T| 00000080 91 60 91 55 91 57 91 58 91 59 91 5a 91 1f 91 fe |. .U.W.X.Y.Z....| 00000090 91 ff 91 28 91 29 91 2d 91 2e 91 2f 91 2c 91 30 |...(.).-.../.,.0| 000000a0 91 31 91 32 91 33 91 34 91 2b 91 35 91 36 91 37 |.1.2.3.4.+.5.6.7| 000000b0 91 38 91 39 91 3a 91 3b 91 3c 91 da 91 db 91 dc |.8.9.:.;.<......| 000000c0 91 dd 91 de 91 d8 91 d9 91 d7 91 d5 91 2f 90 41 |............./.A| 000000d0 91 42 91 43 91 3f 91 33 90 68 90 69 90 6a 90 6b |.B.C.?.3.h.i.j.k| 000000e0 90 6c 90 6d 90 6e 90 6f 90 3d 91 80 91 81 91 82 |.l.m.n.o.=......| 000000f0 91 83 91 84 91 85 91 40 91 01 98 02 98 03 98 04 |.......@........| 00000100 98 05 98 c0 91 c1 91 c2 91 c3 91 c4 91 c5 91 c6 |................| 00000110 91 c7 91 c8 91 c9 91 ca 91 cb 91 cc 91 ce 91 cf |................| 00000120 91 d0 91 d1 91 d2 91 e1 91 e2 91 e3 91 e4 91 e5 |................| 00000130 91 e6 91 e7 91 e8 91 e9 91 ea 91 eb 91 ec 91 ed |................| 00000140 91 ee 91 ef 91 f8 91 f9 91 f2 91 f3 91 f4 91 f7 |................| 00000150 91 22 91 23 91 24 91 f5 91 f6 91 52 90 53 90 57 |.\".#.$.....R.S.W| 00000160 90 58 90 59 90 5a 90 5f 90 07 00 00 00 09 40 04 |.X.Y.Z._......@.| 00000170 40 05 40 03 40 02 40 07 40 01 c1 05 00 00 00 02 |@.@.@.@.@.......| 00000180 d4 07 d4 06 d4 03 d3 01 50 01 00 00 00 01 38 0c |........P.....8.| 00000190 00 00 00 01 30 02 30 06 30 0a 30 08 30 01 38 01 |....0.0.0.0.0.8.| 000001a0 b1 03 b1 02 bf 00 38 04 b1 05 b1 0b 43 00 61 00 |......8.....C.a.| 000001b0 6e 00 6f 00 6e 00 20 00 49 00 6e 00 63 00 2e 00 |n.o.n. .I.n.c...| 000001c0 00 00 13 43 00 61 00 6e 00 6f 00 6e 00 20 00 45 |...C.a.n.o.n. .E| 000001d0 00 4f 00 53 00 20 00 52 00 65 00 62 00 65 00 6c |.O.S. .R.e.b.e.l| 000001e0 00 20 00 54 00 36 00 00 00 08 33 00 2d 00 31 00 |. .T.6....3.-.1.| 000001f0 2e 00 32 00 2e 00 30 00 00 00 08 38 00 32 00 38 |..2...0....8.2.8| 00000200 00 61 00 66 00 35 00 36 00 00 00 |.a.f.5.6...| 0000020b Data packets have no parameters, so the payload always starts at offset 12 . The beginning of the payload starts with 3 fields: uint16_t standard_version; uint32_t vendor_ext_id; uint16_t version; What follows next are 6 PTP_TC_UINT16ARRAY arrays describing what codes the device supports. Parsing these is as simple as reading the first 4 bytes as the array length ( uint32_t ), reading the next length * 2 bytes as uint16_t . Next are 4 strings. Almost all strings in PTP are encoded as wide strings . The first byte is read as the length of the string (in chars), and the rest are a series of wide chars ( int16_t ) with a null terminator. The length field includes the null terminator. Sending data to the responder For example, sending a SetDevicePropValue request: 10 00 00 00 01 00 16 10 03 00 00 00 05 50 00 00 The first parameter is 0x5005 , or PTP_PC_WhiteBalance As described in the MTP spec, PTP_PC_WhiteBalance is a UINT16 data type. So the data packet in this case will be 2 bytes: 0e 00 00 00 02 00 16 10 03 00 00 00 01 00 This sets PTP_PC_WhiteBalance to 0x0001 , or 'Manual'. After this, we expect a response packet from the responder. What's next? The packet structure described in this document is for PTP/USB only. PTP/IP has a totally different packet structure and way of sending packets. Thankfully, I have started to document it here . Notes on USB A PTP/USB device should have at least two endpoints - one for sending data and the other for receiving. There may also be an interrupt endpoint. This is a read only endpoint that the client may poll to get event codes. The class for PTP devices should be 0x06 for Still Imaging devices, as described by the USB forum vcam vcam is an responder implementation of PTP, MTP, and other proprietary PTP extensions that can be used with unmodified PTP clients. This may be useful if you want test yours.","title":"What is PTP?"},{"location":"#what-is-ptp","text":"Picture Transfer Protocol was drafted in 2000 to create a standardized vendor-extensible image and file transfer protocol for digital cameras and printers. This effort was led by PIMA and many other camera manufacturers who, at the time, needed a universal protocol for transfering images from a camera to a computer over USB. At the time every company needed to invest in not only creating their own proprietary protocol, but creating drivers and software for their users. Like many file transfer protocols at the time, PTP doesn't expose a filesystem. Instead, it exposes a generic API for listing, downloading, and uploading objects . An 'object' can be anything, but in most cases it represents a file or folder on the device's storage medium. There's a few reasons why PTP was designed this way: Abstracting away the filesystem allowed the camera to store images in any way it liked (even without a filesystem) Removed the risk of filesystem corruption Allows the camera to safely modify objects while the client is downloading/uploading data PTP is also simple and vendor-extensible. This allows OS developers to create clients that can communicate with any camera, while camera manufacturers can add additional functionality on top of PTP without breaking compatibility with all clients. In 2005 PTP was standardized. It was updated in 2008 , and again in 2013 with new features to improve performance. In 2011, Microsoft released MTP as a superset of PTP with many more features and data types. The MTP spec is freely available and well-written, and is great documentation for anybody who wants to write a client.","title":"What is PTP?"},{"location":"#how-does-it-work","text":"PTP starts with the initiator , or the client. This is the device that issues commands to the responder , which can be a camera, printer, or phone. The initiator can issue commands such as OpenSession or GetDeviceInfo , and the responder will reply back with a a return code, parameters, payload, etc. Another important thing to understand is that PTP transactions consist of phases . A typical transaction will consist of a request phase , an (optional) data phase , and a response phase . The operation phase will always consist of a single request packet sent from the initiator . The data phase can consist of a data packet sent from either the initiator or responder, depending on the operation. The response phase will always consist of a single response packet. For example, an operation like GetDeviceInfo will consist of data received from the responder, while an operation like SetDevicePropValue will have data sent from the initiator. Note that the initiator and responder cannot both send data in the same transaction .","title":"How does it work?"},{"location":"#ptpopensession","text":"Let's look at a very simple transaction from the viewpoint of the initiator. Here is the first packet we will send to the responder, after a USB connection is established: 10 00 00 00 01 00 02 10 01 00 00 00 00 00 00 00 Keep in mind that PTP data structures are encoded as little endian, and fields may not be aligned. This might be easier to look at if we encode it as a C struct. struct PtpContainer { uint32_t length; uint16_t type; uint16_t code; uint32_t transaction_id; uint32_t params[5]; }command = { .length = 16, .type = 1, .code = 0x1002, .transaction_id = 0, .params = { 0 } }; Generally the first request sent to the device will be PtpOpenSession or 0x1002 . This opens a session with the responder. A session is a connection between the initator and responder. Each session has it's own state, transaction IDs, object IDs, and descriptors. The only command allowed outside a session is GetDeviceInfo . PTP is designed this way to allow multiple concurrent sessions from different initiators. Sadly, it doesn't seem like any PTP device supports this feature. Since this packet is sent in the request phase , the type field for this packet is PTP_PACKET_TYPE_COMMAND or 1 . A rule for PtpOpenSession : parameter 0 must contain the SessionID , a unique ID identifying a session. This can be whatever we want. Note that the length field is 16 . The minimium size of a request packet is 12 and the first parameter adds 4 bytes. There can be up to 5 parameters in a command packet. A rule for for PtpOpenSession : transaction_id will always be 0. The transaction ID is maintained by the initiator and incremented by 1 after every completed transaction. Since PtpOpenSession doesn't have a data phase, the response phase is next, with a PTP_PACKET_TYPE_RESPONSE packet ( 3 ) issued from the responder: 0c 00 00 00 03 00 01 20 01 00 00 00 Here we see the code field is 0x2001 or PTP_RC_OK . Keep in mind all PTP codes start with a prefix in the higher 16 bits. For response codes (RC) it's 0x20 , for operation codes (OC) it's 0x10 , etc. Since this is packet is part of the same transaction, the transaction ID is the same. Now, the transaction is over, and we will increment the client's internal transaction ID counter before issuing the next transaction. Another important thing to take note of is that even though all packets are labeled with a transaction ID, a transaction must be fully completed before others are issued (in each session). You cannot issue another transaction while one is in progress. If the transaction ID changes before the transaction is over, then something is wrong.","title":"PtpOpenSession"},{"location":"#ptpgetdeviceinfo","text":"Next, let's have our client send a PtpGetDeviceInfo request. This operation returns a data structure describing the device we are communicating with. Here is the request packet we will send to the responder: 0c 00 00 00 01 00 01 10 02 00 00 00 The transaction id field is now 2 , and the code field is now set to 0x1001 . When we read data from the responder, we should get both a data packet ( PTP_PACKET_TYPE_DATA ) and a response packet ( PTP_PACKET_TYPE_RESPONSE ), in that order. The data packet is big, but is easy to decode: 00000000 0b 02 00 00 02 00 01 10 01 00 00 00 64 00 06 00 |............d...| 00000010 00 00 64 00 00 00 00 a7 00 00 00 14 10 15 10 16 |..d.............| 00000020 10 01 10 02 10 03 10 06 10 04 10 01 91 05 10 02 |................| 00000030 91 07 10 08 10 03 91 09 10 04 91 0a 10 1b 10 07 |................| 00000040 91 0c 10 0d 10 0b 10 05 91 0f 10 06 91 10 91 27 |...............'| 00000050 91 0b 91 08 91 09 91 0c 91 0e 91 0f 91 15 91 14 |................| 00000060 91 13 91 16 91 17 91 20 91 f0 91 18 91 21 91 f1 |....... .....!..| 00000070 91 1d 91 0a 91 1b 91 1c 91 1e 91 1a 91 53 91 54 |.............S.T| 00000080 91 60 91 55 91 57 91 58 91 59 91 5a 91 1f 91 fe |. .U.W.X.Y.Z....| 00000090 91 ff 91 28 91 29 91 2d 91 2e 91 2f 91 2c 91 30 |...(.).-.../.,.0| 000000a0 91 31 91 32 91 33 91 34 91 2b 91 35 91 36 91 37 |.1.2.3.4.+.5.6.7| 000000b0 91 38 91 39 91 3a 91 3b 91 3c 91 da 91 db 91 dc |.8.9.:.;.<......| 000000c0 91 dd 91 de 91 d8 91 d9 91 d7 91 d5 91 2f 90 41 |............./.A| 000000d0 91 42 91 43 91 3f 91 33 90 68 90 69 90 6a 90 6b |.B.C.?.3.h.i.j.k| 000000e0 90 6c 90 6d 90 6e 90 6f 90 3d 91 80 91 81 91 82 |.l.m.n.o.=......| 000000f0 91 83 91 84 91 85 91 40 91 01 98 02 98 03 98 04 |.......@........| 00000100 98 05 98 c0 91 c1 91 c2 91 c3 91 c4 91 c5 91 c6 |................| 00000110 91 c7 91 c8 91 c9 91 ca 91 cb 91 cc 91 ce 91 cf |................| 00000120 91 d0 91 d1 91 d2 91 e1 91 e2 91 e3 91 e4 91 e5 |................| 00000130 91 e6 91 e7 91 e8 91 e9 91 ea 91 eb 91 ec 91 ed |................| 00000140 91 ee 91 ef 91 f8 91 f9 91 f2 91 f3 91 f4 91 f7 |................| 00000150 91 22 91 23 91 24 91 f5 91 f6 91 52 90 53 90 57 |.\".#.$.....R.S.W| 00000160 90 58 90 59 90 5a 90 5f 90 07 00 00 00 09 40 04 |.X.Y.Z._......@.| 00000170 40 05 40 03 40 02 40 07 40 01 c1 05 00 00 00 02 |@.@.@.@.@.......| 00000180 d4 07 d4 06 d4 03 d3 01 50 01 00 00 00 01 38 0c |........P.....8.| 00000190 00 00 00 01 30 02 30 06 30 0a 30 08 30 01 38 01 |....0.0.0.0.0.8.| 000001a0 b1 03 b1 02 bf 00 38 04 b1 05 b1 0b 43 00 61 00 |......8.....C.a.| 000001b0 6e 00 6f 00 6e 00 20 00 49 00 6e 00 63 00 2e 00 |n.o.n. .I.n.c...| 000001c0 00 00 13 43 00 61 00 6e 00 6f 00 6e 00 20 00 45 |...C.a.n.o.n. .E| 000001d0 00 4f 00 53 00 20 00 52 00 65 00 62 00 65 00 6c |.O.S. .R.e.b.e.l| 000001e0 00 20 00 54 00 36 00 00 00 08 33 00 2d 00 31 00 |. .T.6....3.-.1.| 000001f0 2e 00 32 00 2e 00 30 00 00 00 08 38 00 32 00 38 |..2...0....8.2.8| 00000200 00 61 00 66 00 35 00 36 00 00 00 |.a.f.5.6...| 0000020b Data packets have no parameters, so the payload always starts at offset 12 . The beginning of the payload starts with 3 fields: uint16_t standard_version; uint32_t vendor_ext_id; uint16_t version; What follows next are 6 PTP_TC_UINT16ARRAY arrays describing what codes the device supports. Parsing these is as simple as reading the first 4 bytes as the array length ( uint32_t ), reading the next length * 2 bytes as uint16_t . Next are 4 strings. Almost all strings in PTP are encoded as wide strings . The first byte is read as the length of the string (in chars), and the rest are a series of wide chars ( int16_t ) with a null terminator. The length field includes the null terminator.","title":"PtpGetDeviceInfo"},{"location":"#sending-data-to-the-responder","text":"For example, sending a SetDevicePropValue request: 10 00 00 00 01 00 16 10 03 00 00 00 05 50 00 00 The first parameter is 0x5005 , or PTP_PC_WhiteBalance As described in the MTP spec, PTP_PC_WhiteBalance is a UINT16 data type. So the data packet in this case will be 2 bytes: 0e 00 00 00 02 00 16 10 03 00 00 00 01 00 This sets PTP_PC_WhiteBalance to 0x0001 , or 'Manual'. After this, we expect a response packet from the responder.","title":"Sending data to the responder"},{"location":"#whats-next","text":"The packet structure described in this document is for PTP/USB only. PTP/IP has a totally different packet structure and way of sending packets. Thankfully, I have started to document it here .","title":"What's next?"},{"location":"#notes-on-usb","text":"A PTP/USB device should have at least two endpoints - one for sending data and the other for receiving. There may also be an interrupt endpoint. This is a read only endpoint that the client may poll to get event codes. The class for PTP devices should be 0x06 for Still Imaging devices, as described by the USB forum","title":"Notes on USB"},{"location":"#vcam","text":"vcam is an responder implementation of PTP, MTP, and other proprietary PTP extensions that can be used with unmodified PTP clients. This may be useful if you want test yours.","title":"vcam"},{"location":"chdk/","text":"CHDK PTP Extension CHDK implements a custom opcode 0x9999 with a generic low-level interface to communicate with the camera's OS. The primary client implementation for this opcode is in the chdkptp project. Responder-side implementation: https://github.com/petabyt/chdk/blob/23c1f3f04fa1c7d483083d403818972a739c6dfd/core/ptp.c#L443 All functionality is switched from a code in the first parameter: https://github.com/petabyt/chdk/blob/master/trunk/core/ptp.c#L33C1-L33C1 ptp.c ptp.h PTP_CHDK_Version - 0 Return Parameters : param1 : Major version number. param2 : Minor version number. PTP_CHDK_GetMemory - 1 Input Parameters : param2 : Base address (direct access may fail for MMIO or special memory locations; use buffered mode in these cases). param3 : Size in bytes of the memory block to retrieve. param4 : Options for the operation: 0 : Read memory directly. 1 : Read memory using a buffered operation. Other values are reserved for future use. Return Data : Memory block corresponding to the specified address and size. PTP_CHDK_SetMemory - 2 Input Parameters : param2 : Address of the memory block to set. param3 : Size in bytes of the new memory block. Data : New memory block content. PTP_CHDK_CallFunction - 3 Calls a function from a 32-bit pointer in memory, with 32-bit arguments. Input Data : Array of function pointer and up to 10 32-bit integer arguments. Return Parameters : param1 : Return value of the function. PTP_CHDK_TempData - 4 Can be used to store or download temporary data in a temporary location the camera's RAM Input Data : Arbitrary data to be stored for later use. Input Parameters : param2 : Flags for storing data. PTP_CHDK_UploadFile - 5 Input Data : 4-byte length of the filename, followed by the filename and file contents. Writes the rest of payload to disk. PTP_CHDK_DownloadFile - 6 Input : Preceded by PTP_CHDK_TempData with the filename. Call PTP_CHDK_TempData with a string for the filename. Return Data : File contents. PTP_CHDK_ExecuteScript - 7 Input Data : Script content to be executed. Input Parameters : param2 : Script language. For protocol 2.6 and later, the lower byte specifies the language, while the rest is used for PTP_CHDK_SCRIPT_FL* flags. Return Parameters : param1 : Script ID (similar to a process ID). param2 : Status, as defined in ptp_chdk_script_error_type . PTP_CHDK_ScriptStatus - 8 Return Parameters : param1 : Bitmask of script execution status: PTP_CHDK_SCRIPT_STATUS_RUN : Set if a script is running. PTP_CHDK_SCRIPT_STATUS_MSG : Set if messages are waiting to be read from the script. Other bits and parameters are reserved for future use. PTP_CHDK_ScriptSupport - 9 Return Parameters : param1 : Bitmask of supported scripting interfaces: CHDK_PTP_SUPPORT_LUA : Set if Lua is supported. PTP_CHDK_ReadScriptMsg - 10 Return Parameters : param1 : chdk_ptp_s_msg_type . param2 : Message subtype: For script returns and user messages, this is ptp_chdk_script_data_type . For errors, this is ptp_chdk_script_error_type . param3 : Script ID of the script that generated the message. param4 : Length of the message data. Return Data : Message content. If the message has no data, a minimum of 1 byte of zeros is returned. PTP_CHDK_WriteScriptMsg - 11 Input Parameters : param2 : Target script ID ( 0 for \"don't care\"; messages for non-running scripts are discarded). Input Data : String message for the script. Output Parameters : param1 : ptp_chdk_script_msg_status . PTP_CHDK_GetDisplayData - 12 Input Parameters : param2 : Bitmask of requested data. Output Parameters : param1 : Total size of data. Return Data : Protocol information, frame buffer descriptions, and selected display data. PTP_CHDK_RemoteCaptureIsReady - 13 Return Parameters : param1 : Status: 0 : Not ready. 0x10000000 : Remote capture not initialized. Otherwise, bitmask of PTP_CHDK_CAPTURE_* data types. param2 : Image number. PTP_CHDK_RemoteCaptureGetData - 14 Input Parameters : param2 : Bit indicating data type to retrieve. Return Parameters : param1 : Length of the data. param2 : Indicates if more chunks are available ( 0 = no more chunks). param3 : Seek position ( -1 = no seek required). enum ptp_chdk_command { PTP_CHDK_Version = 0, // return param1 is major version number // return param2 is minor version number PTP_CHDK_GetMemory, // param2 is base address (direct may fail on MMIO etc. Use buffered for those) // param3 is size (in bytes) // param4 is options: 0 read directly, 1 buffer. Other values reserved // return data is memory block PTP_CHDK_SetMemory, // param2 is address // param3 is size (in bytes) // data is new memory block PTP_CHDK_CallFunction, // data is array of function pointer and 32 bit int arguments (max: 10 args prior to protocol 2.5) // return param1 is return value PTP_CHDK_TempData, // data is data to be stored for later // param2 is for the TD flags below PTP_CHDK_UploadFile, // data is 4-byte length of filename, followed by filename and contents PTP_CHDK_DownloadFile, // preceded by PTP_CHDK_TempData with filename // return data are file contents PTP_CHDK_ExecuteScript, // data is script to be executed // param2 is language of script // in proto 2.6 and later, language is the lower byte, rest is used for PTP_CHDK_SCRIPT_FL* flags // return param1 is script id, like a process id // return param2 is status from ptp_chdk_script_error_type PTP_CHDK_ScriptStatus, // Script execution status // return param1 bits // PTP_CHDK_SCRIPT_STATUS_RUN is set if a script running, cleared if not // PTP_CHDK_SCRIPT_STATUS_MSG is set if script messages from script waiting to be read // all other bits and params are reserved for future use PTP_CHDK_ScriptSupport, // Which scripting interfaces are supported in this build // param1 CHDK_PTP_SUPPORT_LUA is set if lua is supported, cleared if not // all other bits and params are reserved for future use PTP_CHDK_ReadScriptMsg, // read next message from camera script system // return param1 is chdk_ptp_s_msg_type // return param2 is message subtype: // for script return and users this is ptp_chdk_script_data_type // for error ptp_chdk_script_error_type // return param3 is script id of script that generated the message // return param4 is length of the message data. // return data is message. // A minimum of 1 bytes of zeros is returned if the message has no data (empty string or type NONE) PTP_CHDK_WriteScriptMsg, // write a message for scripts running on camera // input param2 is target script id, 0=don't care. Messages for a non-running script will be discarded // data length is handled by ptp data phase // input messages do not have type or subtype, they are always a string destined for the script (similar to USER/string) // output param1 is ptp_chdk_script_msg_status PTP_CHDK_GetDisplayData, // Return camera display data // This is defined as separate sub protocol in live_view.h // Changes to the sub-protocol will always be considered a minor change to the main protocol // param2 bitmask of data // output param1 = total size of data // return data is protocol information, frame buffer descriptions and selected display data // Currently a data phase is always returned. Future versions may define other behavior // for values in currently unused parameters. // Direct image capture over USB. // Use lua get_usb_capture_support for available data types, lua init_usb_capture for setup PTP_CHDK_RemoteCaptureIsReady, // Check if data is available // return param1 is status // 0 = not ready // 0x10000000 = remote capture not initialized // otherwise bitmask of PTP_CHDK_CAPTURE_* datatypes // return param2 is image number PTP_CHDK_RemoteCaptureGetData // retrieve data // param2 is bit indicating data type to get // return param1 is length // return param2 more chunks available? // 0 = no more chunks of selected format // return param3 seek required to pos (-1 = no seek) };","title":"CHDK PTP Extension"},{"location":"chdk/#chdk-ptp-extension","text":"CHDK implements a custom opcode 0x9999 with a generic low-level interface to communicate with the camera's OS. The primary client implementation for this opcode is in the chdkptp project. Responder-side implementation: https://github.com/petabyt/chdk/blob/23c1f3f04fa1c7d483083d403818972a739c6dfd/core/ptp.c#L443 All functionality is switched from a code in the first parameter: https://github.com/petabyt/chdk/blob/master/trunk/core/ptp.c#L33C1-L33C1 ptp.c ptp.h","title":"CHDK PTP Extension"},{"location":"chdk/#ptp_chdk_version-0","text":"Return Parameters : param1 : Major version number. param2 : Minor version number.","title":"PTP_CHDK_Version - 0"},{"location":"chdk/#ptp_chdk_getmemory-1","text":"Input Parameters : param2 : Base address (direct access may fail for MMIO or special memory locations; use buffered mode in these cases). param3 : Size in bytes of the memory block to retrieve. param4 : Options for the operation: 0 : Read memory directly. 1 : Read memory using a buffered operation. Other values are reserved for future use. Return Data : Memory block corresponding to the specified address and size.","title":"PTP_CHDK_GetMemory - 1"},{"location":"chdk/#ptp_chdk_setmemory-2","text":"Input Parameters : param2 : Address of the memory block to set. param3 : Size in bytes of the new memory block. Data : New memory block content.","title":"PTP_CHDK_SetMemory - 2"},{"location":"chdk/#ptp_chdk_callfunction-3","text":"Calls a function from a 32-bit pointer in memory, with 32-bit arguments. Input Data : Array of function pointer and up to 10 32-bit integer arguments. Return Parameters : param1 : Return value of the function.","title":"PTP_CHDK_CallFunction - 3"},{"location":"chdk/#ptp_chdk_tempdata-4","text":"Can be used to store or download temporary data in a temporary location the camera's RAM Input Data : Arbitrary data to be stored for later use. Input Parameters : param2 : Flags for storing data.","title":"PTP_CHDK_TempData - 4"},{"location":"chdk/#ptp_chdk_uploadfile-5","text":"Input Data : 4-byte length of the filename, followed by the filename and file contents. Writes the rest of payload to disk.","title":"PTP_CHDK_UploadFile - 5"},{"location":"chdk/#ptp_chdk_downloadfile-6","text":"Input : Preceded by PTP_CHDK_TempData with the filename. Call PTP_CHDK_TempData with a string for the filename. Return Data : File contents.","title":"PTP_CHDK_DownloadFile - 6"},{"location":"chdk/#ptp_chdk_executescript-7","text":"Input Data : Script content to be executed. Input Parameters : param2 : Script language. For protocol 2.6 and later, the lower byte specifies the language, while the rest is used for PTP_CHDK_SCRIPT_FL* flags. Return Parameters : param1 : Script ID (similar to a process ID). param2 : Status, as defined in ptp_chdk_script_error_type .","title":"PTP_CHDK_ExecuteScript - 7"},{"location":"chdk/#ptp_chdk_scriptstatus-8","text":"Return Parameters : param1 : Bitmask of script execution status: PTP_CHDK_SCRIPT_STATUS_RUN : Set if a script is running. PTP_CHDK_SCRIPT_STATUS_MSG : Set if messages are waiting to be read from the script. Other bits and parameters are reserved for future use.","title":"PTP_CHDK_ScriptStatus - 8"},{"location":"chdk/#ptp_chdk_scriptsupport-9","text":"Return Parameters : param1 : Bitmask of supported scripting interfaces: CHDK_PTP_SUPPORT_LUA : Set if Lua is supported.","title":"PTP_CHDK_ScriptSupport - 9"},{"location":"chdk/#ptp_chdk_readscriptmsg-10","text":"Return Parameters : param1 : chdk_ptp_s_msg_type . param2 : Message subtype: For script returns and user messages, this is ptp_chdk_script_data_type . For errors, this is ptp_chdk_script_error_type . param3 : Script ID of the script that generated the message. param4 : Length of the message data. Return Data : Message content. If the message has no data, a minimum of 1 byte of zeros is returned.","title":"PTP_CHDK_ReadScriptMsg - 10"},{"location":"chdk/#ptp_chdk_writescriptmsg-11","text":"Input Parameters : param2 : Target script ID ( 0 for \"don't care\"; messages for non-running scripts are discarded). Input Data : String message for the script. Output Parameters : param1 : ptp_chdk_script_msg_status .","title":"PTP_CHDK_WriteScriptMsg - 11"},{"location":"chdk/#ptp_chdk_getdisplaydata-12","text":"Input Parameters : param2 : Bitmask of requested data. Output Parameters : param1 : Total size of data. Return Data : Protocol information, frame buffer descriptions, and selected display data.","title":"PTP_CHDK_GetDisplayData - 12"},{"location":"chdk/#ptp_chdk_remotecaptureisready-13","text":"Return Parameters : param1 : Status: 0 : Not ready. 0x10000000 : Remote capture not initialized. Otherwise, bitmask of PTP_CHDK_CAPTURE_* data types. param2 : Image number.","title":"PTP_CHDK_RemoteCaptureIsReady - 13"},{"location":"chdk/#ptp_chdk_remotecapturegetdata-14","text":"Input Parameters : param2 : Bit indicating data type to retrieve. Return Parameters : param1 : Length of the data. param2 : Indicates if more chunks are available ( 0 = no more chunks). param3 : Seek position ( -1 = no seek required). enum ptp_chdk_command { PTP_CHDK_Version = 0, // return param1 is major version number // return param2 is minor version number PTP_CHDK_GetMemory, // param2 is base address (direct may fail on MMIO etc. Use buffered for those) // param3 is size (in bytes) // param4 is options: 0 read directly, 1 buffer. Other values reserved // return data is memory block PTP_CHDK_SetMemory, // param2 is address // param3 is size (in bytes) // data is new memory block PTP_CHDK_CallFunction, // data is array of function pointer and 32 bit int arguments (max: 10 args prior to protocol 2.5) // return param1 is return value PTP_CHDK_TempData, // data is data to be stored for later // param2 is for the TD flags below PTP_CHDK_UploadFile, // data is 4-byte length of filename, followed by filename and contents PTP_CHDK_DownloadFile, // preceded by PTP_CHDK_TempData with filename // return data are file contents PTP_CHDK_ExecuteScript, // data is script to be executed // param2 is language of script // in proto 2.6 and later, language is the lower byte, rest is used for PTP_CHDK_SCRIPT_FL* flags // return param1 is script id, like a process id // return param2 is status from ptp_chdk_script_error_type PTP_CHDK_ScriptStatus, // Script execution status // return param1 bits // PTP_CHDK_SCRIPT_STATUS_RUN is set if a script running, cleared if not // PTP_CHDK_SCRIPT_STATUS_MSG is set if script messages from script waiting to be read // all other bits and params are reserved for future use PTP_CHDK_ScriptSupport, // Which scripting interfaces are supported in this build // param1 CHDK_PTP_SUPPORT_LUA is set if lua is supported, cleared if not // all other bits and params are reserved for future use PTP_CHDK_ReadScriptMsg, // read next message from camera script system // return param1 is chdk_ptp_s_msg_type // return param2 is message subtype: // for script return and users this is ptp_chdk_script_data_type // for error ptp_chdk_script_error_type // return param3 is script id of script that generated the message // return param4 is length of the message data. // return data is message. // A minimum of 1 bytes of zeros is returned if the message has no data (empty string or type NONE) PTP_CHDK_WriteScriptMsg, // write a message for scripts running on camera // input param2 is target script id, 0=don't care. Messages for a non-running script will be discarded // data length is handled by ptp data phase // input messages do not have type or subtype, they are always a string destined for the script (similar to USER/string) // output param1 is ptp_chdk_script_msg_status PTP_CHDK_GetDisplayData, // Return camera display data // This is defined as separate sub protocol in live_view.h // Changes to the sub-protocol will always be considered a minor change to the main protocol // param2 bitmask of data // output param1 = total size of data // return data is protocol information, frame buffer descriptions and selected display data // Currently a data phase is always returned. Future versions may define other behavior // for values in currently unused parameters. // Direct image capture over USB. // Use lua get_usb_capture_support for available data types, lua init_usb_capture for setup PTP_CHDK_RemoteCaptureIsReady, // Check if data is available // return param1 is status // 0 = not ready // 0x10000000 = remote capture not initialized // otherwise bitmask of PTP_CHDK_CAPTURE_* datatypes // return param2 is image number PTP_CHDK_RemoteCaptureGetData // retrieve data // param2 is bit indicating data type to get // return param1 is length // return param2 more chunks available? // 0 = no more chunks of selected format // return param3 seek required to pos (-1 = no seek) };","title":"PTP_CHDK_RemoteCaptureGetData - 14"},{"location":"enums/","text":"PTP Codes Here is a list of all PTP codes encoded in C, for your conveinence to re-encode in whatever language you wish. enum PtpType { PTP_ENUM = 0, // regular enums PTP_OC = 1, // operation codes PTP_OF = 2, // object formats PTP_DPC = 3, // property codes PTP_EC = 4, // event codes PTP_RC = 5, // return code PTP_ST = 6, // storage type PTP_FT = 7, // filesystem type PTP_AC = 8, // access code PTP_AT = 9, // association type }; struct PtpEnum { int type; int vendor; char *name; int value; }; struct PtpEnum ptp_enums[] = { {PTP_ENUM, 0, \"PTP_PACKET_TYPE_COMMAND\", 0x1}, {PTP_ENUM, 0, \"PTP_PACKET_TYPE_DATA\", 0x2}, {PTP_ENUM, 0, \"PTP_PACKET_TYPE_RESPONSE\", 0x3}, {PTP_ENUM, 0, \"PTP_PACKET_TYPE_EVENT\", 0x4}, {PTP_OC, 0, \"PTP_OC_GetDeviceInfo\", 0x1001}, {PTP_OC, 0, \"PTP_OC_OpenSession\", 0x1002}, {PTP_OC, 0, \"PTP_OC_CloseSession\", 0x1003}, {PTP_OC, 0, \"PTP_OC_GetStorageIDs\", 0x1004}, {PTP_OC, 0, \"PTP_OC_GetStorageInfo\", 0x1005}, {PTP_OC, 0, \"PTP_OC_GetNumObjects\", 0x1006}, {PTP_OC, 0, \"PTP_OC_GetObjectHandles\", 0x1007}, {PTP_OC, 0, \"PTP_OC_GetObjectInfo\", 0x1008}, {PTP_OC, 0, \"PTP_OC_GetObject\", 0x1009}, {PTP_OC, 0, \"PTP_OC_GetThumb\", 0x100A}, {PTP_OC, 0, \"PTP_OC_DeleteObject\", 0x100B}, {PTP_OC, 0, \"PTP_OC_SendObjectInfo\", 0x100C}, {PTP_OC, 0, \"PTP_OC_SendObject\", 0x100D}, {PTP_OC, 0, \"PTP_OC_InitiateCapture\", 0x100E}, {PTP_OC, 0, \"PTP_OC_FormatStore\", 0x100F}, {PTP_OC, 0, \"PTP_OC_ResetDevice\", 0x1010}, {PTP_OC, 0, \"PTP_OC_SelfTest\", 0x1011}, {PTP_OC, 0, \"PTP_OC_SetObjectProtection\", 0x1012}, {PTP_OC, 0, \"PTP_OC_PowerDown\", 0x1013}, {PTP_OC, 0, \"PTP_OC_GetDevicePropDesc\", 0x1014}, {PTP_OC, 0, \"PTP_OC_GetDevicePropValue\", 0x1015}, {PTP_OC, 0, \"PTP_OC_SetDevicePropValue\", 0x1016}, {PTP_OC, 0, \"PTP_OC_ResetDevicePropValue\", 0x1017}, {PTP_OC, 0, \"PTP_OC_TerminateOpenCapture\", 0x1018}, {PTP_OC, 0, \"PTP_OC_MoveObject\", 0x1019}, {PTP_OC, 0, \"PTP_OC_CopyObject\", 0x101A}, {PTP_OC, 0, \"PTP_OC_GetPartialObject\", 0x101B}, {PTP_OC, 0, \"PTP_OC_InitiateOpenCapture\", 0x101C}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjectPropsSupported\", 0x9801}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjectPropDesc\", 0x9802}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjectPropValue\", 0x9803}, {PTP_OC, 0, \"PTP_OC_MTP_SetObjectPropValue\", 0x9804}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjPropList\", 0x9805}, {PTP_OC, 0, \"PTP_OC_MTP_SetObjPropList\", 0x9806}, {PTP_OC, 0, \"PTP_OC_MTP_SendObjectPropList\", 0x9808}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjectReferences\", 0x9810}, {PTP_OC, 0, \"PTP_OC_MTP_SetObjectReferences\", 0x9811}, {PTP_OC, 0, \"PTP_OC_MTP_UpdateDeviceFirmware\", 0x9812}, {PTP_OC, 0, \"PTP_OC_MTP_Skip\", 0x9820}, {PTP_OC, 3, \"PTP_OC_NIKON_Capture\", 0x90C0}, {PTP_OC, 3, \"PTP_OC_NIKON_AfCaptureSDRAM\", 0x90CB}, {PTP_OC, 3, \"PTP_OC_NIKON_StartLiveView\", 0x9201}, {PTP_OC, 3, \"PTP_OC_NIKON_EndLiveView\", 0x9202}, {PTP_OC, 3, \"PTP_OC_NIKON_GetEvent\", 0x90C7}, {PTP_OC, 2, \"PTP_OC_CANON_ViewFinderOn\", 0x900B}, {PTP_OC, 2, \"PTP_OC_CANON_ViewFinderOff\", 0x900C}, {PTP_OC, 2, \"PTP_OC_CANON_InitCaptureInRAM\", 0x901A}, {PTP_OC, 2, \"PTP_OC_CANON_GetViewFinderImage\", 0x901D}, {PTP_OC, 2, \"PTP_OC_CANON_LockUI\", 0x9004}, {PTP_OC, 2, \"PTP_OC_CANON_UnlockUI\", 0x9005}, {PTP_OC, 2, \"PTP_OC_CANON_DoNothing\", 0x902F}, {PTP_OC, 1, \"PTP_OC_EOS_GetStorageIDs\", 0x9101}, {PTP_OC, 1, \"PTP_OC_EOS_GetStorageInfo\", 0x9102}, {PTP_OC, 1, \"PTP_OC_EOS_GetObjectInfoEx\", 0x9109}, {PTP_OC, 1, \"PTP_OC_EOS_SetDevicePropValueEx\", 0x9110}, {PTP_OC, 1, \"PTP_OC_EOS_SetRemoteMode\", 0x9114}, {PTP_OC, 1, \"PTP_OC_EOS_SetEventMode\", 0x9115}, {PTP_OC, 1, \"PTP_OC_EOS_GetEvent\", 0x9116}, {PTP_OC, 1, \"PTP_OC_EOS_PCHDDCapacity\", 0x911A}, {PTP_OC, 1, \"PTP_OC_EOS_SetUILock\", 0x911B}, {PTP_OC, 1, \"PTP_OC_EOS_ResetUILock\", 0x911C}, {PTP_OC, 1, \"PTP_OC_EOS_KeepDeviceOn\", 0x911D}, {PTP_OC, 1, \"PTP_OC_EOS_UpdateFirmware\", 0x911F}, {PTP_OC, 1, \"PTP_OC_EOS_BulbStart\", 0x9125}, {PTP_OC, 1, \"PTP_OC_EOS_BulbEnd\", 0x9126}, {PTP_OC, 1, \"PTP_OC_EOS_GetDevicePropValue\", 0x9127}, {PTP_OC, 1, \"PTP_OC_EOS_RemoteReleaseOn\", 0x9128}, {PTP_OC, 1, \"PTP_OC_EOS_RemoteReleaseOff\", 0x9129}, {PTP_OC, 1, \"PTP_OC_EOS_DriveLens\", 0x9155}, {PTP_OC, 1, \"PTP_OC_EOS_InitiateViewfinder\", 0x9151}, {PTP_OC, 1, \"PTP_OC_EOS_TerminateViewfinder\", 0x9152}, {PTP_OC, 1, \"PTP_OC_EOS_GetViewFinderData\", 0x9153}, {PTP_OC, 1, \"PTP_OC_EOS_DoAutoFocus\", 0x9154}, {PTP_OC, 1, \"PTP_OC_EOS_AfCancel\", 0x9160}, {PTP_OC, 1, \"PTP_OC_EOS_SetDefaultSetting\", 0x91BE}, {PTP_OC, 1, \"PTP_OC_EOS_EnableEventProc\", 0x9050}, {PTP_OC, 1, \"PTP_OC_EOS_ExecuteEventProc\", 0x9052}, {PTP_OC, 1, \"PTP_OC_EOS_GetEventProcReturnData\", 0x9053}, {PTP_OC, 1, \"PTP_OC_EOS_IsEventProcRunning\", 0x9057}, {PTP_ENUM, 0, \"EOS_DESTINATION_CAM\", 0x2}, {PTP_ENUM, 0, \"EOS_DESTINATION_PC\", 0x4}, {PTP_ENUM, 0, \"EOS_DESTINATION_BOTH\", 0x6}, {PTP_RC, 0, \"PTP_RC_Undefined\", 0x2000}, {PTP_RC, 0, \"PTP_RC_OK\", 0x2001}, {PTP_RC, 0, \"PTP_RC_GeneralError\", 0x2002}, {PTP_RC, 0, \"PTP_RC_SessionNotOpen\", 0x2003}, {PTP_RC, 0, \"PTP_RC_InvalidTransactionID\", 0x2004}, {PTP_RC, 0, \"PTP_RC_OperationNotSupported\", 0x2005}, {PTP_RC, 0, \"PTP_RC_ParameterNotSupported\", 0x2006}, {PTP_RC, 0, \"PTP_RC_IncompleteTransfer\", 0x2007}, {PTP_RC, 0, \"PTP_RC_InvalidStorageId\", 0x2008}, {PTP_RC, 0, \"PTP_RC_InvalidObjectHandle\", 0x2009}, {PTP_RC, 0, \"PTP_RC_DevicePropNotSupported\", 0x200A}, {PTP_RC, 0, \"PTP_RC_InvalidObjectFormatCode\", 0x200B}, {PTP_RC, 0, \"PTP_RC_StoreFull\", 0x200C}, {PTP_RC, 0, \"PTP_RC_ObjectWriteProtected\", 0x200D}, {PTP_RC, 0, \"PTP_RC_StoreReadOnly\", 0x200E}, {PTP_RC, 0, \"PTP_RC_AccessDenied\", 0x200F}, {PTP_RC, 0, \"PTP_RC_NoThumbnailPresent\", 0x2010}, {PTP_RC, 0, \"PTP_RC_SelfTestFailed\", 0x2011}, {PTP_RC, 0, \"PTP_RC_PartialDeletion\", 0x2012}, {PTP_RC, 0, \"PTP_RC_StoreNotAvailable\", 0x2013}, {PTP_RC, 0, \"PTP_RC_SpecByFormatUnsupported\", 0x2014}, {PTP_RC, 0, \"PTP_RC_NoValidObjectInfo\", 0x2015}, {PTP_RC, 0, \"PTP_RC_InvalidCodeFormat\", 0x2016}, {PTP_RC, 0, \"PTP_RC_UnknownVendorCode\", 0x2017}, {PTP_RC, 0, \"PTP_RC_CaptureAlreadyTerminated\", 0x2018}, {PTP_RC, 0, \"PTP_RC_DeviceBusy\", 0x2019}, {PTP_RC, 0, \"PTP_RC_InvalidParentObject\", 0x201A}, {PTP_RC, 0, \"PTP_RC_InvalidDevicePropFormat\", 0x201B}, {PTP_RC, 0, \"PTP_RC_InvalidDevicePropValue\", 0x201C}, {PTP_RC, 0, \"PTP_RC_InvalidParameter\", 0x201D}, {PTP_RC, 0, \"PTP_RC_SessionAlreadyOpened\", 0x201E}, {PTP_RC, 0, \"PTP_RC_TransactionCanceled\", 0x201F}, {PTP_RC, 0, \"PTP_RC_SpecOfDestinationUnsupported\", 0x2020}, {PTP_RC, 2, \"PTP_RC_CANON_Unknown\", 0xA001}, {PTP_RC, 2, \"PTP_RC_CANON_NotReady\", 0xA102}, {PTP_RC, 2, \"PTP_RC_CANON_BatteryLow\", 0xA101}, {PTP_RC, 0, \"PTP_RC_UndefinedMTP\", 0xA800}, {PTP_RC, 0, \"PTP_RC_InvalidObjPropCode\", 0xA801}, {PTP_RC, 0, \"PTP_RC_InvalidObjPropCodeFormat\", 0xA802}, {PTP_RC, 0, \"PTP_RC_InvalidObjPropCodeValue\", 0xA803}, {PTP_RC, 0, \"PTP_RC_InvalidObjReference\", 0xA804}, {PTP_RC, 0, \"PTP_RC_InvalidDataset\", 0xA806}, {PTP_RC, 0, \"PTP_RC_GroupSpecUnsupported\", 0xA807}, {PTP_RC, 0, \"PTP_RC_DepthSpecUnsupported\", 0xA808}, {PTP_RC, 0, \"PTP_RC_ObjectTooLarge\", 0xA809}, {PTP_RC, 0, \"PTP_RC_ObjectPropUnsupported\", 0xA80A}, {PTP_EC, 0, \"PTP_EC_Undefined\", 0x4000}, {PTP_EC, 0, \"PTP_EC_CancelTransaction\", 0x4001}, {PTP_EC, 0, \"PTP_EC_ObjectAdded\", 0x4002}, {PTP_EC, 0, \"PTP_EC_ObjectRemoved\", 0x4003}, {PTP_EC, 0, \"PTP_EC_StoreAdded\", 0x4004}, {PTP_EC, 0, \"PTP_EC_StoreRemoved\", 0x4005}, {PTP_EC, 0, \"PTP_EC_DevicePropChanged\", 0x4006}, {PTP_EC, 0, \"PTP_EC_ObjectInfoChanged\", 0x4007}, {PTP_EC, 0, \"PTP_EC_DeviceInfoChanged\", 0x4008}, {PTP_EC, 0, \"PTP_EC_RequestObjectTransfer\", 0x4009}, {PTP_EC, 0, \"PTP_EC_StoreFull\", 0x400A}, {PTP_EC, 0, \"PTP_EC_DeviceReset\", 0x400B}, {PTP_EC, 0, \"PTP_EC_StorageInfoChanged\", 0x400C}, {PTP_EC, 0, \"PTP_EC_CaptureComplete\", 0x400D}, {PTP_EC, 0, \"PTP_EC_UnreportedStatus\", 0x400E}, {PTP_EC, 0, \"PTP_EC_Canon_RequestObjectTransfer\", 0xC009}, {PTP_EC, 1, \"PTP_EC_EOS_RequestGetEvent\", 0xC101}, {PTP_EC, 1, \"PTP_EC_EOS_ObjectAddedEx\", 0xC181}, {PTP_EC, 1, \"PTP_EC_EOS_ObjectRemoved\", 0xC182}, {PTP_EC, 1, \"PTP_EC_EOS_RequestGetObjectInfoEx\", 0xC183}, {PTP_EC, 1, \"PTP_EC_EOS_StorageStatusChanged\", 0xC184}, {PTP_EC, 1, \"PTP_EC_EOS_StorageInfoChanged\", 0xC185}, {PTP_EC, 1, \"PTP_EC_EOS_RequestObjectTransfer\", 0xc186}, {PTP_EC, 1, \"PTP_EC_EOS_ObjectInfoChangedEx\", 0xC187}, {PTP_EC, 1, \"PTP_EC_EOS_ObjectContentChanged\", 0xC188}, {PTP_EC, 1, \"PTP_EC_EOS_PropValueChanged\", 0xC189}, {PTP_EC, 1, \"PTP_EC_EOS_AvailListChanged\", 0xC18A}, {PTP_EC, 1, \"PTP_EC_EOS_CameraStatusChanged\", 0xC18B}, {PTP_EC, 1, \"PTP_EC_EOS_WillSoonShutdown\", 0xC18D}, {PTP_EC, 1, \"PTP_EC_EOS_ShutdownTimerUpdated\", 0xC18E}, {PTP_EC, 1, \"PTP_EC_EOS_RequestCancelTransfer\", 0xC18F}, {PTP_EC, 1, \"PTP_EC_EOS_RequestObjectTransferDT\", 0xC190}, {PTP_EC, 1, \"PTP_EC_EOS_RequestCancelTransferDT\", 0xC191}, {PTP_EC, 1, \"PTP_EC_EOS_StoreAdded\", 0xC192}, {PTP_EC, 1, \"PTP_EC_EOS_StoreRemoved\", 0xC193}, {PTP_EC, 1, \"PTP_EC_EOS_BulbExposureTime\", 0xC194}, {PTP_EC, 1, \"PTP_EC_EOS_RecordingTime\", 0xC195}, {PTP_EC, 1, \"PTP_EC_EOS_RequestObjectTransferTS\", 0xC1A2}, {PTP_EC, 1, \"PTP_EC_EOS_AfResult\", 0xC1A3}, {PTP_EC, 1, \"PTP_EC_EOS_InfoCheckComplete\", 0xC1A4}, {PTP_EC, 0, \"PTP_EC_Nikon_ObjectAddedInSDRAM\", 0xC101}, {PTP_EC, 0, \"PTP_EC_Nikon_CaptureCompleteRecInSdram\", 0xC102}, {PTP_OF, 0, \"PTP_OF_Undefined\", 0x3000}, {PTP_OF, 0, \"PTP_OF_Association\", 0x3001}, {PTP_OF, 0, \"PTP_OF_Script\", 0x3002}, {PTP_OF, 0, \"PTP_OF_Executable\", 0x3003}, {PTP_OF, 0, \"PTP_OF_Text\", 0x3004}, {PTP_OF, 0, \"PTP_OF_HTML\", 0x3005}, {PTP_OF, 0, \"PTP_OF_DPOF\", 0x3006}, {PTP_OF, 0, \"PTP_OF_AIFF\", 0x3007}, {PTP_OF, 0, \"PTP_OF_WAV\", 0x3008}, {PTP_OF, 0, \"PTP_OF_MP3\", 0x3009}, {PTP_OF, 0, \"PTP_OF_AVI\", 0x300A}, {PTP_OF, 0, \"PTP_OF_MPEG\", 0x300B}, {PTP_OF, 0, \"PTP_OF_ASF\", 0x300C}, {PTP_OF, 0, \"PTP_OF_MOV\", 0x300D}, {PTP_OF, 0, \"PTP_OF_JPEG\", 0x3801}, {PTP_OF, 0, \"PTP_OF_TIFF_EP\", 0x3802}, {PTP_OF, 0, \"PTP_OF_FlashPix\", 0x3803}, {PTP_OF, 0, \"PTP_OF_BMP\", 0x3804}, {PTP_OF, 0, \"PTP_OF_CIFF\", 0x3805}, {PTP_OF, 0, \"PTP_OF_Reserved2\", 0x3806}, {PTP_OF, 0, \"PTP_OF_GIF\", 0x3807}, {PTP_OF, 0, \"PTP_OF_JFIF\", 0x3808}, {PTP_OF, 0, \"PTP_OF_PCD\", 0x3809}, {PTP_OF, 0, \"PTP_OF_PICT\", 0x380A}, {PTP_OF, 0, \"PTP_OF_PNG\", 0x380B}, {PTP_OF, 0, \"PTP_OF_Reserved1\", 0x380C}, {PTP_OF, 0, \"PTP_OF_TIFF\", 0x380D}, {PTP_OF, 0, \"PTP_OF_TIFF_IT\", 0x380E}, {PTP_OF, 0, \"PTP_OF_JP2\", 0x380F}, {PTP_OF, 0, \"PTP_OF_JPX\", 0x3810}, {PTP_OF, 0, \"PTP_OF_Firmware\", 0xB802}, {PTP_OF, 0, \"PTP_OF_WIF\", 0xB881}, {PTP_OF, 0, \"PTP_OF_Audio\", 0xB900}, {PTP_OF, 0, \"PTP_OF_WMA\", 0xb901}, {PTP_OF, 0, \"PTP_OF_OGG\", 0xb902}, {PTP_OF, 0, \"PTP_OF_AAC\", 0xb903}, {PTP_OF, 0, \"PTP_OF_Audible\", 0xb904}, {PTP_OF, 0, \"PTP_OF_FLAC\", 0xb906}, {PTP_OF, 0, \"PTP_OF_SamsungPlaylist\", 0xb909}, {PTP_OF, 0, \"PTP_OF_Video\", 0xb980}, {PTP_OF, 0, \"PTP_OF_WMV\", 0xb981}, {PTP_OF, 0, \"PTP_OF_MP4\", 0xb982}, {PTP_OF, 0, \"PTP_OF_3GP\", 0xb984}, {PTP_OF, 0, \"PTP_OF_MP2\", 0xb983}, {PTP_ENUM, 0, \"PTP_OPC_StorageID\", 0xDC01}, {PTP_ENUM, 0, \"PTP_OPC_ObjectFormat\", 0xDC02}, {PTP_ENUM, 0, \"PTP_OPC_ProtectionStatus\", 0xDC03}, {PTP_ENUM, 0, \"PTP_OPC_ObjectSize\", 0xDC04}, {PTP_ENUM, 0, \"PTP_OPC_AssociationType\", 0xDC05}, {PTP_ENUM, 0, \"PTP_OPC_AssociationDesc\", 0xDC06}, {PTP_ENUM, 0, \"PTP_OPC_ObjectFileName\", 0xDC07}, {PTP_ENUM, 0, \"PTP_OPC_DateCreated\", 0xDC08}, {PTP_ENUM, 0, \"PTP_OPC_DateModified\", 0xDC09}, {PTP_ENUM, 0, \"PTP_OPC_Keywords\", 0xDC0A}, {PTP_ENUM, 0, \"PTP_OPC_ParentObject\", 0xDC0B}, {PTP_ENUM, 0, \"PTP_OPC_AllowedFolderContents\", 0xDC0C}, {PTP_ENUM, 0, \"PTP_OPC_Hidden\", 0xDC0D}, {PTP_ENUM, 0, \"PTP_OPC_SystemObject\", 0xDC0E}, {PTP_ENUM, 0, \"PTP_OPC_PersistantUniqueObjectIdentifier\", 0xDC41}, {PTP_ENUM, 0, \"PTP_OPC_SyncID\", 0xDC42}, {PTP_ENUM, 0, \"PTP_OPC_PropertyBag\", 0xDC43}, {PTP_ENUM, 0, \"PTP_OPC_Name\", 0xDC44}, {PTP_ENUM, 0, \"PTP_OPC_CreatedBy\", 0xDC45}, {PTP_ENUM, 0, \"PTP_OPC_Artist\", 0xDC46}, {PTP_ENUM, 0, \"PTP_OPC_DateAuthored\", 0xDC47}, {PTP_ENUM, 0, \"PTP_OPC_Description\", 0xDC48}, {PTP_ENUM, 0, \"PTP_OPC_URLReference\", 0xDC49}, {PTP_ENUM, 0, \"PTP_OPC_LanguageLocale\", 0xDC4A}, {PTP_ENUM, 0, \"PTP_OPC_CopyrightInformation\", 0xDC4B}, {PTP_ENUM, 0, \"PTP_OPC_Source\", 0xDC4C}, {PTP_ENUM, 0, \"PTP_OPC_OriginLocation\", 0xDC4D}, {PTP_ENUM, 0, \"PTP_OPC_DateAdded\", 0xDC4E}, {PTP_ENUM, 0, \"PTP_OPC_NonConsumable\", 0xDC4F}, {PTP_ENUM, 0, \"PTP_OPC_CorruptOrUnplayable\", 0xDC50}, {PTP_ENUM, 0, \"PTP_OPC_ProducerSerialNumber\", 0xDC51}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleFormat\", 0xDC81}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleSize\", 0xDC82}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleHeight\", 0xDC83}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleWidth\", 0xDC84}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleDuration\", 0xDC85}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleData\", 0xDC86}, {PTP_ENUM, 0, \"PTP_OPC_Width\", 0xDC87}, {PTP_ENUM, 0, \"PTP_OPC_Height\", 0xDC88}, {PTP_ENUM, 0, \"PTP_OPC_Duration\", 0xDC89}, {PTP_ENUM, 0, \"PTP_OPC_Rating\", 0xDC8A}, {PTP_ENUM, 0, \"PTP_OPC_Track\", 0xDC8B}, {PTP_ENUM, 0, \"PTP_OPC_Genre\", 0xDC8C}, {PTP_ENUM, 0, \"PTP_OPC_Credits\", 0xDC8D}, {PTP_ENUM, 0, \"PTP_OPC_Lyrics\", 0xDC8E}, {PTP_ENUM, 0, \"PTP_OPC_SubscriptionContentID\", 0xDC8F}, {PTP_ENUM, 0, \"PTP_OPC_ProducedBy\", 0xDC90}, {PTP_ENUM, 0, \"PTP_OPC_UseCount\", 0xDC91}, {PTP_ENUM, 0, \"PTP_OPC_SkipCount\", 0xDC92}, {PTP_ENUM, 0, \"PTP_OPC_LastAccessed\", 0xDC93}, {PTP_ENUM, 0, \"PTP_OPC_ParentalRating\", 0xDC94}, {PTP_ENUM, 0, \"PTP_OPC_MetaGenre\", 0xDC95}, {PTP_ENUM, 0, \"PTP_OPC_Composer\", 0xDC96}, {PTP_ENUM, 0, \"PTP_OPC_EffectiveRating\", 0xDC97}, {PTP_ENUM, 0, \"PTP_OPC_Subtitle\", 0xDC98}, {PTP_ENUM, 0, \"PTP_OPC_OriginalReleaseDate\", 0xDC99}, {PTP_ENUM, 0, \"PTP_OPC_AlbumName\", 0xDC9A}, {PTP_ENUM, 0, \"PTP_OPC_AlbumArtist\", 0xDC9B}, {PTP_ENUM, 0, \"PTP_OPC_Mood\", 0xDC9C}, {PTP_ENUM, 0, \"PTP_OPC_DRMStatus\", 0xDC9D}, {PTP_ENUM, 0, \"PTP_OPC_SubDescription\", 0xDC9E}, {PTP_ENUM, 0, \"PTP_OPC_IsCropped\", 0xDCD1}, {PTP_ENUM, 0, \"PTP_OPC_IsColorCorrected\", 0xDCD2}, {PTP_ENUM, 0, \"PTP_OPC_ImageBitDepth\", 0xDCD3}, {PTP_ENUM, 0, \"PTP_OPC_Fnumber\", 0xDCD4}, {PTP_ENUM, 0, \"PTP_OPC_ExposureTime\", 0xDCD5}, {PTP_ENUM, 0, \"PTP_OPC_ExposureIndex\", 0xDCD6}, {PTP_ENUM, 0, \"PTP_OPC_DisplayName\", 0xDCE0}, {PTP_ENUM, 0, \"PTP_OPC_BodyText\", 0xDCE1}, {PTP_ENUM, 0, \"PTP_OPC_Subject\", 0xDCE2}, {PTP_ENUM, 0, \"PTP_OPC_Priority\", 0xDCE3}, {PTP_ENUM, 0, \"PTP_OPC_GivenName\", 0xDD00}, {PTP_ENUM, 0, \"PTP_OPC_MiddleNames\", 0xDD01}, {PTP_ENUM, 0, \"PTP_OPC_FamilyName\", 0xDD02}, {PTP_ENUM, 0, \"PTP_OPC_Prefix\", 0xDD03}, {PTP_ENUM, 0, \"PTP_OPC_Suffix\", 0xDD04}, {PTP_ENUM, 0, \"PTP_OPC_PhoneticGivenName\", 0xDD05}, {PTP_ENUM, 0, \"PTP_OPC_PhoneticFamilyName\", 0xDD06}, {PTP_ENUM, 0, \"PTP_OPC_EmailPrimary\", 0xDD07}, {PTP_ENUM, 0, \"PTP_OPC_EmailPersonal1\", 0xDD08}, {PTP_ENUM, 0, \"PTP_OPC_EmailPersonal2\", 0xDD09}, {PTP_ENUM, 0, \"PTP_OPC_EmailBusiness1\", 0xDD0A}, {PTP_ENUM, 0, \"PTP_OPC_EmailBusiness2\", 0xDD0B}, {PTP_ENUM, 0, \"PTP_OPC_EmailOthers\", 0xDD0C}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberPrimary\", 0xDD0D}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberPersonal\", 0xDD0E}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberPersonal2\", 0xDD0F}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberBusiness\", 0xDD10}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberBusiness2\", 0xDD11}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberMobile\", 0xDD12}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberMobile2\", 0xDD13}, {PTP_ENUM, 0, \"PTP_OPC_FaxNumberPrimary\", 0xDD14}, {PTP_ENUM, 0, \"PTP_OPC_FaxNumberPersonal\", 0xDD15}, {PTP_ENUM, 0, \"PTP_OPC_FaxNumberBusiness\", 0xDD16}, {PTP_ENUM, 0, \"PTP_OPC_PagerNumber\", 0xDD17}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberOthers\", 0xDD18}, {PTP_ENUM, 0, \"PTP_OPC_PrimaryWebAddress\", 0xDD19}, {PTP_ENUM, 0, \"PTP_OPC_PersonalWebAddress\", 0xDD1A}, {PTP_ENUM, 0, \"PTP_OPC_BusinessWebAddress\", 0xDD1B}, {PTP_ENUM, 0, \"PTP_OPC_InstantMessengerAddress\", 0xDD1C}, {PTP_ENUM, 0, \"PTP_OPC_InstantMessengerAddress2\", 0xDD1D}, {PTP_ENUM, 0, \"PTP_OPC_InstantMessengerAddress3\", 0xDD1E}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFull\", 0xDD1F}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullLine1\", 0xDD20}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullLine2\", 0xDD21}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullCity\", 0xDD22}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullRegion\", 0xDD23}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullPostalCode\", 0xDD24}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullCountry\", 0xDD25}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessFull\", 0xDD26}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessLine1\", 0xDD27}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessLine2\", 0xDD28}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessCity\", 0xDD29}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessRegion\", 0xDD2A}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessPostalCode\", 0xDD2B}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessCountry\", 0xDD2C}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherFull\", 0xDD2D}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherLine1\", 0xDD2E}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherLine2\", 0xDD2F}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherCity\", 0xDD30}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherRegion\", 0xDD31}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherPostalCode\", 0xDD32}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherCountry\", 0xDD33}, {PTP_ENUM, 0, \"PTP_OPC_OrganizationName\", 0xDD34}, {PTP_ENUM, 0, \"PTP_OPC_PhoneticOrganizationName\", 0xDD35}, {PTP_ENUM, 0, \"PTP_OPC_Role\", 0xDD36}, {PTP_ENUM, 0, \"PTP_OPC_Birthdate\", 0xDD37}, {PTP_ENUM, 0, \"PTP_OPC_MessageTo\", 0xDD40}, {PTP_ENUM, 0, \"PTP_OPC_MessageCC\", 0xDD41}, {PTP_ENUM, 0, \"PTP_OPC_MessageBCC\", 0xDD42}, {PTP_ENUM, 0, \"PTP_OPC_MessageRead\", 0xDD43}, {PTP_ENUM, 0, \"PTP_OPC_MessageReceivedTime\", 0xDD44}, {PTP_ENUM, 0, \"PTP_OPC_MessageSender\", 0xDD45}, {PTP_ENUM, 0, \"PTP_OPC_ActivityBeginTime\", 0xDD50}, {PTP_ENUM, 0, \"PTP_OPC_ActivityEndTime\", 0xDD51}, {PTP_ENUM, 0, \"PTP_OPC_ActivityLocation\", 0xDD52}, {PTP_ENUM, 0, \"PTP_OPC_ActivityRequiredAttendees\", 0xDD54}, {PTP_ENUM, 0, \"PTP_OPC_ActivityOptionalAttendees\", 0xDD55}, {PTP_ENUM, 0, \"PTP_OPC_ActivityResources\", 0xDD56}, {PTP_ENUM, 0, \"PTP_OPC_ActivityAccepted\", 0xDD57}, {PTP_ENUM, 0, \"PTP_OPC_Owner\", 0xDD5D}, {PTP_ENUM, 0, \"PTP_OPC_Editor\", 0xDD5E}, {PTP_ENUM, 0, \"PTP_OPC_Webmaster\", 0xDD5F}, {PTP_ENUM, 0, \"PTP_OPC_URLSource\", 0xDD60}, {PTP_ENUM, 0, \"PTP_OPC_URLDestination\", 0xDD61}, {PTP_ENUM, 0, \"PTP_OPC_TimeBookmark\", 0xDD62}, {PTP_ENUM, 0, \"PTP_OPC_ObjectBookmark\", 0xDD63}, {PTP_ENUM, 0, \"PTP_OPC_ByteBookmark\", 0xDD64}, {PTP_ENUM, 0, \"PTP_OPC_LastBuildDate\", 0xDD70}, {PTP_ENUM, 0, \"PTP_OPC_TimetoLive\", 0xDD71}, {PTP_ENUM, 0, \"PTP_OPC_MediaGUID\", 0xDD72}, {PTP_ENUM, 0, \"PTP_OPC_TotalBitRate\", 0xDE91}, {PTP_ENUM, 0, \"PTP_OPC_BitRateType\", 0xDE92}, {PTP_ENUM, 0, \"PTP_OPC_SampleRate\", 0xDE93}, {PTP_ENUM, 0, \"PTP_OPC_NumberOfChannels\", 0xDE94}, {PTP_ENUM, 0, \"PTP_OPC_AudioBitDepth\", 0xDE95}, {PTP_ENUM, 0, \"PTP_OPC_ScanDepth\", 0xDE97}, {PTP_ENUM, 0, \"PTP_OPC_AudioWAVECodec\", 0xDE99}, {PTP_ENUM, 0, \"PTP_OPC_AudioBitRate\", 0xDE9A}, {PTP_ENUM, 0, \"PTP_OPC_VideoFourCCCodec\", 0xDE9B}, {PTP_ENUM, 0, \"PTP_OPC_VideoBitRate\", 0xDE9C}, {PTP_ENUM, 0, \"PTP_OPC_FramesPerThousandSeconds\", 0xDE9D}, {PTP_ENUM, 0, \"PTP_OPC_KeyFrameDistance\", 0xDE9E}, {PTP_ENUM, 0, \"PTP_OPC_BufferSize\", 0xDE9F}, {PTP_ENUM, 0, \"PTP_OPC_EncodingQuality\", 0xDEA0}, {PTP_ENUM, 0, \"PTP_OPC_EncodingProfile\", 0xDEA1}, {PTP_ENUM, 0, \"PTP_OPC_BuyFlag\", 0xD901}, {PTP_OF, 2, \"PTP_OF_CANON_CRW\", 0xb101}, {PTP_OF, 0, \"PTP_OF_RAW\", 0xb103}, {PTP_OF, 2, \"PTP_OF_CANON_MOV\", 0xb104}, {PTP_ENUM, 0, \"PTP_AT_Folder\", 0x1}, {PTP_ENUM, 0, \"PTP_AT_Album\", 0x1}, {PTP_ENUM, 0, \"PTP_DPC_BatteryLevel\", 0x5001}, {PTP_ENUM, 0, \"PTP_DPC_FunctionalMode\", 0x5002}, {PTP_ENUM, 0, \"PTP_DPC_ImageSize\", 0x5003}, {PTP_ENUM, 0, \"PTP_DPC_CompressionSetting\", 0x5004}, {PTP_ENUM, 0, \"PTP_DPC_WhiteBalance\", 0x5005}, {PTP_ENUM, 0, \"PTP_DPC_RGBGain\", 0x5006}, {PTP_ENUM, 0, \"PTP_DPC_FNumber\", 0x5007}, {PTP_ENUM, 0, \"PTP_DPC_FocalLength\", 0x5008}, {PTP_ENUM, 0, \"PTP_DPC_FocalDistance\", 0x5009}, {PTP_ENUM, 0, \"PTP_DPC_FocusMode\", 0x500A}, {PTP_ENUM, 0, \"PTP_DPC_ExposureMeteringMode\", 0x500B}, {PTP_ENUM, 0, \"PTP_DPC_FlashMode\", 0x500C}, {PTP_ENUM, 0, \"PTP_DPC_ExposureTime\", 0x500D}, {PTP_ENUM, 0, \"PTP_DPC_ExposureProgramMode\", 0x500E}, {PTP_ENUM, 0, \"PTP_DPC_ExposureIndex\", 0x500F}, {PTP_ENUM, 0, \"PTP_DPC_ExposureBiasCompensation\", 0x5010}, {PTP_ENUM, 0, \"PTP_DPC_DateTime\", 0x5011}, {PTP_ENUM, 0, \"PTP_DPC_CaptureDelay\", 0x5012}, {PTP_ENUM, 0, \"PTP_DPC_StillCaptureMode\", 0x5013}, {PTP_ENUM, 0, \"PTP_DPC_Contrast\", 0x5014}, {PTP_ENUM, 0, \"PTP_DPC_Sharpness\", 0x5015}, {PTP_ENUM, 0, \"PTP_DPC_DigitalZoom\", 0x5016}, {PTP_ENUM, 0, \"PTP_DPC_EffectMode\", 0x5017}, {PTP_ENUM, 0, \"PTP_DPC_BurstNumber\", 0x5018}, {PTP_ENUM, 0, \"PTP_DPC_BurstInterval\", 0x5019}, {PTP_ENUM, 0, \"PTP_DPC_TimelapseNumber\", 0x501A}, {PTP_ENUM, 0, \"PTP_DPC_TimelapseInterval\", 0x501B}, {PTP_ENUM, 0, \"PTP_DPC_FocusMeteringMode\", 0x501C}, {PTP_ENUM, 0, \"PTP_DPC_UploadURL\", 0x501D}, {PTP_ENUM, 0, \"PTP_DPC_Artist\", 0x501E}, {PTP_ENUM, 0, \"PTP_DPC_CopyrightInfo\", 0x501F}, {PTP_ENUM, 0, \"PTP_DPC_SupportedStreams\", 0x5020}, {PTP_ENUM, 0, \"PTP_DPC_EnabledStreams\", 0x5021}, {PTP_ENUM, 0, \"PTP_DPC_VideoFormat\", 0x5022}, {PTP_ENUM, 0, \"PTP_DPC_VideoResolution\", 0x5023}, {PTP_ENUM, 0, \"PTP_DPC_VideoQuality\", 0x5024}, {PTP_ENUM, 0, \"PTP_DPC_VideoFrameRate\", 0x5025}, {PTP_ENUM, 0, \"PTP_DPC_VideoContrast\", 0x5026}, {PTP_ENUM, 0, \"PTP_DPC_VideoBrightness\", 0x5027}, {PTP_ENUM, 0, \"PTP_DPC_AudioFormat\", 0x5028}, {PTP_ENUM, 0, \"PTP_DPC_AudioBitrate\", 0x5029}, {PTP_ENUM, 0, \"PTP_DPC_AudioSamplingRate\", 0x502A}, {PTP_ENUM, 0, \"PTP_DPC_AudioBitPerSample\", 0x502B}, {PTP_ENUM, 0, \"PTP_DPC_AudioVolume\", 0x502C}, {PTP_ENUM, 0, \"PTP_DPC_CANON_BeepCode\", 0xD001}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ViewFinderMode\", 0xD003}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ImageQuality\", 0xD006}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ImageSize\", 0xD008}, {PTP_ENUM, 0, \"PTP_DPC_CANON_FlashMode\", 0xD00a}, {PTP_ENUM, 0, \"PTP_DPC_CANON_TvAvSetting\", 0xD00c}, {PTP_ENUM, 0, \"PTP_DPC_CANON_MeteringMode\", 0xd010}, {PTP_ENUM, 0, \"PTP_DPC_CANON_MacroMode\", 0xd011}, {PTP_ENUM, 0, \"PTP_DPC_CANON_FocusingPoint\", 0xd012}, {PTP_ENUM, 0, \"PTP_DPC_CANON_WhiteBalance\", 0xd013}, {PTP_ENUM, 0, \"PTP_DPC_CANON_AFMode\", 0xD015}, {PTP_ENUM, 0, \"PTP_DPC_CANON_Contrast\", 0xD017}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ISOSpeed\", 0xd01c}, {PTP_ENUM, 0, \"PTP_DPC_CANON_Aperture\", 0xd01c}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ShutterSpeed\", 0xd01e}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ExpComp\", 0xd01f}, {PTP_ENUM, 0, \"PTP_DPC_CANON_Zoom\", 0xd02a}, {PTP_ENUM, 0, \"PTP_DPC_CANON_SizeQuality\", 0xd02c}, {PTP_ENUM, 0, \"PTP_DPC_CANON_FlashMemory\", 0xd031}, {PTP_ENUM, 0, \"PTP_DPC_CANON_CameraModel\", 0xd032}, {PTP_ENUM, 0, \"PTP_DPC_CANON_CameraOwner\", 0xd033}, {PTP_ENUM, 0, \"PTP_DPC_CANON_UnixTime\", 0xd032}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ViewFinderOut\", 0xD036}, {PTP_ENUM, 0, \"PTP_DPC_CANON_RealImageWidth\", 0xD039}, {PTP_ENUM, 0, \"PTP_DPC_CANON_PhotoEffect\", 0xD040}, {PTP_ENUM, 0, \"PTP_DPC_CANON_AssistLight\", 0xD041}, {PTP_ENUM, 0, \"PTP_DPC_EOS_Aperture\", 0xD101}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ShutterSpeed\", 0xD102}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ISOSpeed\", 0xD103}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ExpCompensation\", 0xD104}, {PTP_ENUM, 0, \"PTP_DPC_EOS_AutoExposureMode\", 0xD105}, {PTP_ENUM, 0, \"PTP_DPC_EOS_DriveMode\", 0xD106}, {PTP_ENUM, 0, \"PTP_DPC_EOS_MeteringMode\", 0xD107}, {PTP_ENUM, 0, \"PTP_DPC_EOS_FocusMode\", 0xD108}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalance\", 0xD109}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ColorTemperature\", 0xD10A}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalanceAdjustA\", 0xD10B}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalanceAdjustB\", 0xD10C}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalanceXA\", 0xD10D}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalanceXB\", 0xD10E}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ColorSpace\", 0xD10F}, {PTP_ENUM, 0, \"PTP_DPC_EOS_PictureStyle\", 0xD110}, {PTP_ENUM, 0, \"PTP_DPC_EOS_BatteryPower\", 0xD111}, {PTP_ENUM, 0, \"PTP_DPC_EOS_BatterySelect\", 0xD112}, {PTP_ENUM, 0, \"PTP_DPC_EOS_CameraTime\", 0xD113}, {PTP_ENUM, 0, \"PTP_DPC_EOS_Owner\", 0xD115}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ModelID\", 0xD116}, {PTP_ENUM, 0, \"PTP_DPC_EOS_PTPExtensionVersion\", 0xD119}, {PTP_ENUM, 0, \"PTP_DPC_EOS_DPOFVersion\", 0xD11A}, {PTP_ENUM, 0, \"PTP_DPC_EOS_AvailableShots\", 0xD11B}, {PTP_ENUM, 0, \"PTP_DPC_EOS_CaptureDestination\", 0xD11C}, {PTP_ENUM, 0, \"PTP_DPC_EOS_CurrentFolder\", 0xD11F}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ImageFormat\", 0xD120}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ImageFormatCF\", 0xD121}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ImageFormatSD\", 0xD122}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ImageFormatExtHD\", 0xD123}, {PTP_ENUM, 0, \"PTP_DPC_EOS_AEModeDial\", 0xD138}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ShutterCounter\", 0xD1AC}, {PTP_ENUM, 0, \"PTP_DPC_EOS_VF_Output\", 0xD1B0}, {PTP_ENUM, 0, \"PTP_DPC_EOS_EVFMode\", 0xD1B1}, {PTP_ENUM, 0, \"PTP_DPC_EOS_DOFPreview\", 0xD1B2}, {PTP_ENUM, 0, \"PTP_DPC_EOS_VFSharp\", 0xD1B3}, {PTP_ENUM, 0, \"PTP_DPC_EOS_EVFWBMode\", 0xD1B4}, {PTP_ENUM, 0, \"PTP_DPC_EOS_FocusInfoEx\", 0xD1D3}, {PTP_OC, 0, \"PTP_OC_ML_LiveBmpRam\", 0x9996}, {PTP_OC, 0, \"PTP_OC_ML_Live360x240\", 0x9997}, {PTP_OC, 0, \"PTP_OC_MagicLantern\", 0x9998}, {PTP_OC, 0, \"PTP_OC_CHDK\", 0x9999}, {PTP_ST, 0, \"PTP_ST_Undefined\", 0x0}, {PTP_ST, 0, \"PTP_ST_FixedROM\", 0x1}, {PTP_ST, 0, \"PTP_ST_RemovableROM\", 0x2}, {PTP_ST, 0, \"PTP_ST_FixedRAM\", 0x3}, {PTP_ST, 0, \"PTP_ST_RemovableRAM\", 0x4}, {PTP_FT, 0, \"PTP_FT_Undefined\", 0x0}, {PTP_FT, 0, \"PTP_FT_GenericFlat\", 0x1}, {PTP_FT, 0, \"PTP_FT_GenericHei\", 0x2}, {PTP_FT, 0, \"PTP_FT_DCF\", 0x3}, {PTP_AC, 0, \"PTP_AC_ReadWrite\", 0x0}, {PTP_AC, 0, \"PTP_AC_Read\", 0x1}, {PTP_AC, 0, \"PTP_AC_ReadDelete\", 0x2}, {PTP_ENUM, 0, \"PTP_TC_UNDEF\", 0x0}, {PTP_ENUM, 0, \"PTP_TC_INT8\", 0x1}, {PTP_ENUM, 0, \"PTP_TC_UINT8\", 0x2}, {PTP_ENUM, 0, \"PTP_TC_INT16\", 0x3}, {PTP_ENUM, 0, \"PTP_TC_UINT16\", 0x4}, {PTP_ENUM, 0, \"PTP_TC_INT32\", 0x5}, {PTP_ENUM, 0, \"PTP_TC_UINT32\", 0x6}, {PTP_ENUM, 0, \"PTP_TC_INT64\", 0x7}, {PTP_ENUM, 0, \"PTP_TC_UINT64\", 0x8}, {PTP_ENUM, 0, \"PTP_TC_INT128\", 0x9}, {PTP_ENUM, 0, \"PTP_TC_UINT128\", 0xA}, {PTP_ENUM, 0, \"PTP_TC_UINT8ARRAY\", 0x4002}, {PTP_ENUM, 0, \"PTP_TC_UINT16ARRAY\", 0x4004}, {PTP_ENUM, 0, \"PTP_TC_UINT32ARRAY\", 0x4006}, {PTP_ENUM, 0, \"PTP_TC_UINT64ARRAY\", 0x4008}, {PTP_ENUM, 0, \"PTP_TC_STRING\", 0xFFFF}, {PTP_ENUM, 0, \"PTP_RangeForm\", 0x1}, {PTP_ENUM, 0, \"PTP_EnumerationForm\", 0x2}, {PTP_ENUM, 0, \"PTPIP_INIT_COMMAND_REQ\", 0x1}, {PTP_ENUM, 0, \"PTPIP_INIT_COMMAND_ACK\", 0x2}, {PTP_ENUM, 0, \"PTPIP_INIT_EVENT_REQ\", 0x3}, {PTP_ENUM, 0, \"PTPIP_INIT_EVENT_ACK\", 0x4}, {PTP_ENUM, 0, \"PTPIP_INIT_FAIL\", 0x5}, {PTP_ENUM, 0, \"PTPIP_COMMAND_REQUEST\", 0x6}, {PTP_ENUM, 0, \"PTPIP_COMMAND_RESPONSE\", 0x7}, {PTP_ENUM, 0, \"PTPIP_EVENT\", 0x8}, {PTP_ENUM, 0, \"PTPIP_DATA_PACKET_START\", 0x9}, {PTP_ENUM, 0, \"PTPIP_DATA_PACKET\", 0xA}, {PTP_ENUM, 0, \"PTPIP_CANCEL_TRANSACTION\", 0xB}, {PTP_ENUM, 0, \"PTPIP_DATA_PACKET_END\", 0xC}, {PTP_ENUM, 0, \"PTPIP_PING\", 0xD}, {PTP_ENUM, 0, \"PTPIP_PONG\", 0xE}, {PTP_ENUM, 0, \"USB_VENDOR_CANON\", 0x4A9}, {PTP_ENUM, 0, \"MTP_REQ_CANCEL\", 0x64}, {PTP_ENUM, 0, \"MTP_REQ_GET_EXT_EVENT_DATA\", 0x65}, {PTP_ENUM, 0, \"USB_REQ_RESET\", 0x66}, {PTP_ENUM, 0, \"USB_REQ_STATUS\", 0x67}, {PTP_ENUM, 0, \"USB_REQ_GET_STATUS\", 0x00}, {PTP_ENUM, 0, \"USB_REQ_CLEAR_FEATURE\", 0x01}, {PTP_ENUM, 0, \"USB_REQ_SET_FEATURE\", 0x03}, {PTP_ENUM, 0, \"USB_DP_HTD\", 0x0}, {PTP_ENUM, 0, \"USB_DP_DTH\", 0x80}, {PTP_ENUM, 0, \"USB_RECIP_DEVICE\", 0x00}, {PTP_ENUM, 0, \"USB_RECIP_INTERFACE\", 0x01}, {PTP_ENUM, 0, \"USB_RECIP_ENDPOINT\", 0x02}, {PTP_ENUM, 0, \"USB_TYPE_CLASS\", 0x20}, }; int ptp_enums_length = 560;","title":"PTP Codes"},{"location":"enums/#ptp-codes","text":"Here is a list of all PTP codes encoded in C, for your conveinence to re-encode in whatever language you wish. enum PtpType { PTP_ENUM = 0, // regular enums PTP_OC = 1, // operation codes PTP_OF = 2, // object formats PTP_DPC = 3, // property codes PTP_EC = 4, // event codes PTP_RC = 5, // return code PTP_ST = 6, // storage type PTP_FT = 7, // filesystem type PTP_AC = 8, // access code PTP_AT = 9, // association type }; struct PtpEnum { int type; int vendor; char *name; int value; }; struct PtpEnum ptp_enums[] = { {PTP_ENUM, 0, \"PTP_PACKET_TYPE_COMMAND\", 0x1}, {PTP_ENUM, 0, \"PTP_PACKET_TYPE_DATA\", 0x2}, {PTP_ENUM, 0, \"PTP_PACKET_TYPE_RESPONSE\", 0x3}, {PTP_ENUM, 0, \"PTP_PACKET_TYPE_EVENT\", 0x4}, {PTP_OC, 0, \"PTP_OC_GetDeviceInfo\", 0x1001}, {PTP_OC, 0, \"PTP_OC_OpenSession\", 0x1002}, {PTP_OC, 0, \"PTP_OC_CloseSession\", 0x1003}, {PTP_OC, 0, \"PTP_OC_GetStorageIDs\", 0x1004}, {PTP_OC, 0, \"PTP_OC_GetStorageInfo\", 0x1005}, {PTP_OC, 0, \"PTP_OC_GetNumObjects\", 0x1006}, {PTP_OC, 0, \"PTP_OC_GetObjectHandles\", 0x1007}, {PTP_OC, 0, \"PTP_OC_GetObjectInfo\", 0x1008}, {PTP_OC, 0, \"PTP_OC_GetObject\", 0x1009}, {PTP_OC, 0, \"PTP_OC_GetThumb\", 0x100A}, {PTP_OC, 0, \"PTP_OC_DeleteObject\", 0x100B}, {PTP_OC, 0, \"PTP_OC_SendObjectInfo\", 0x100C}, {PTP_OC, 0, \"PTP_OC_SendObject\", 0x100D}, {PTP_OC, 0, \"PTP_OC_InitiateCapture\", 0x100E}, {PTP_OC, 0, \"PTP_OC_FormatStore\", 0x100F}, {PTP_OC, 0, \"PTP_OC_ResetDevice\", 0x1010}, {PTP_OC, 0, \"PTP_OC_SelfTest\", 0x1011}, {PTP_OC, 0, \"PTP_OC_SetObjectProtection\", 0x1012}, {PTP_OC, 0, \"PTP_OC_PowerDown\", 0x1013}, {PTP_OC, 0, \"PTP_OC_GetDevicePropDesc\", 0x1014}, {PTP_OC, 0, \"PTP_OC_GetDevicePropValue\", 0x1015}, {PTP_OC, 0, \"PTP_OC_SetDevicePropValue\", 0x1016}, {PTP_OC, 0, \"PTP_OC_ResetDevicePropValue\", 0x1017}, {PTP_OC, 0, \"PTP_OC_TerminateOpenCapture\", 0x1018}, {PTP_OC, 0, \"PTP_OC_MoveObject\", 0x1019}, {PTP_OC, 0, \"PTP_OC_CopyObject\", 0x101A}, {PTP_OC, 0, \"PTP_OC_GetPartialObject\", 0x101B}, {PTP_OC, 0, \"PTP_OC_InitiateOpenCapture\", 0x101C}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjectPropsSupported\", 0x9801}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjectPropDesc\", 0x9802}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjectPropValue\", 0x9803}, {PTP_OC, 0, \"PTP_OC_MTP_SetObjectPropValue\", 0x9804}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjPropList\", 0x9805}, {PTP_OC, 0, \"PTP_OC_MTP_SetObjPropList\", 0x9806}, {PTP_OC, 0, \"PTP_OC_MTP_SendObjectPropList\", 0x9808}, {PTP_OC, 0, \"PTP_OC_MTP_GetObjectReferences\", 0x9810}, {PTP_OC, 0, \"PTP_OC_MTP_SetObjectReferences\", 0x9811}, {PTP_OC, 0, \"PTP_OC_MTP_UpdateDeviceFirmware\", 0x9812}, {PTP_OC, 0, \"PTP_OC_MTP_Skip\", 0x9820}, {PTP_OC, 3, \"PTP_OC_NIKON_Capture\", 0x90C0}, {PTP_OC, 3, \"PTP_OC_NIKON_AfCaptureSDRAM\", 0x90CB}, {PTP_OC, 3, \"PTP_OC_NIKON_StartLiveView\", 0x9201}, {PTP_OC, 3, \"PTP_OC_NIKON_EndLiveView\", 0x9202}, {PTP_OC, 3, \"PTP_OC_NIKON_GetEvent\", 0x90C7}, {PTP_OC, 2, \"PTP_OC_CANON_ViewFinderOn\", 0x900B}, {PTP_OC, 2, \"PTP_OC_CANON_ViewFinderOff\", 0x900C}, {PTP_OC, 2, \"PTP_OC_CANON_InitCaptureInRAM\", 0x901A}, {PTP_OC, 2, \"PTP_OC_CANON_GetViewFinderImage\", 0x901D}, {PTP_OC, 2, \"PTP_OC_CANON_LockUI\", 0x9004}, {PTP_OC, 2, \"PTP_OC_CANON_UnlockUI\", 0x9005}, {PTP_OC, 2, \"PTP_OC_CANON_DoNothing\", 0x902F}, {PTP_OC, 1, \"PTP_OC_EOS_GetStorageIDs\", 0x9101}, {PTP_OC, 1, \"PTP_OC_EOS_GetStorageInfo\", 0x9102}, {PTP_OC, 1, \"PTP_OC_EOS_GetObjectInfoEx\", 0x9109}, {PTP_OC, 1, \"PTP_OC_EOS_SetDevicePropValueEx\", 0x9110}, {PTP_OC, 1, \"PTP_OC_EOS_SetRemoteMode\", 0x9114}, {PTP_OC, 1, \"PTP_OC_EOS_SetEventMode\", 0x9115}, {PTP_OC, 1, \"PTP_OC_EOS_GetEvent\", 0x9116}, {PTP_OC, 1, \"PTP_OC_EOS_PCHDDCapacity\", 0x911A}, {PTP_OC, 1, \"PTP_OC_EOS_SetUILock\", 0x911B}, {PTP_OC, 1, \"PTP_OC_EOS_ResetUILock\", 0x911C}, {PTP_OC, 1, \"PTP_OC_EOS_KeepDeviceOn\", 0x911D}, {PTP_OC, 1, \"PTP_OC_EOS_UpdateFirmware\", 0x911F}, {PTP_OC, 1, \"PTP_OC_EOS_BulbStart\", 0x9125}, {PTP_OC, 1, \"PTP_OC_EOS_BulbEnd\", 0x9126}, {PTP_OC, 1, \"PTP_OC_EOS_GetDevicePropValue\", 0x9127}, {PTP_OC, 1, \"PTP_OC_EOS_RemoteReleaseOn\", 0x9128}, {PTP_OC, 1, \"PTP_OC_EOS_RemoteReleaseOff\", 0x9129}, {PTP_OC, 1, \"PTP_OC_EOS_DriveLens\", 0x9155}, {PTP_OC, 1, \"PTP_OC_EOS_InitiateViewfinder\", 0x9151}, {PTP_OC, 1, \"PTP_OC_EOS_TerminateViewfinder\", 0x9152}, {PTP_OC, 1, \"PTP_OC_EOS_GetViewFinderData\", 0x9153}, {PTP_OC, 1, \"PTP_OC_EOS_DoAutoFocus\", 0x9154}, {PTP_OC, 1, \"PTP_OC_EOS_AfCancel\", 0x9160}, {PTP_OC, 1, \"PTP_OC_EOS_SetDefaultSetting\", 0x91BE}, {PTP_OC, 1, \"PTP_OC_EOS_EnableEventProc\", 0x9050}, {PTP_OC, 1, \"PTP_OC_EOS_ExecuteEventProc\", 0x9052}, {PTP_OC, 1, \"PTP_OC_EOS_GetEventProcReturnData\", 0x9053}, {PTP_OC, 1, \"PTP_OC_EOS_IsEventProcRunning\", 0x9057}, {PTP_ENUM, 0, \"EOS_DESTINATION_CAM\", 0x2}, {PTP_ENUM, 0, \"EOS_DESTINATION_PC\", 0x4}, {PTP_ENUM, 0, \"EOS_DESTINATION_BOTH\", 0x6}, {PTP_RC, 0, \"PTP_RC_Undefined\", 0x2000}, {PTP_RC, 0, \"PTP_RC_OK\", 0x2001}, {PTP_RC, 0, \"PTP_RC_GeneralError\", 0x2002}, {PTP_RC, 0, \"PTP_RC_SessionNotOpen\", 0x2003}, {PTP_RC, 0, \"PTP_RC_InvalidTransactionID\", 0x2004}, {PTP_RC, 0, \"PTP_RC_OperationNotSupported\", 0x2005}, {PTP_RC, 0, \"PTP_RC_ParameterNotSupported\", 0x2006}, {PTP_RC, 0, \"PTP_RC_IncompleteTransfer\", 0x2007}, {PTP_RC, 0, \"PTP_RC_InvalidStorageId\", 0x2008}, {PTP_RC, 0, \"PTP_RC_InvalidObjectHandle\", 0x2009}, {PTP_RC, 0, \"PTP_RC_DevicePropNotSupported\", 0x200A}, {PTP_RC, 0, \"PTP_RC_InvalidObjectFormatCode\", 0x200B}, {PTP_RC, 0, \"PTP_RC_StoreFull\", 0x200C}, {PTP_RC, 0, \"PTP_RC_ObjectWriteProtected\", 0x200D}, {PTP_RC, 0, \"PTP_RC_StoreReadOnly\", 0x200E}, {PTP_RC, 0, \"PTP_RC_AccessDenied\", 0x200F}, {PTP_RC, 0, \"PTP_RC_NoThumbnailPresent\", 0x2010}, {PTP_RC, 0, \"PTP_RC_SelfTestFailed\", 0x2011}, {PTP_RC, 0, \"PTP_RC_PartialDeletion\", 0x2012}, {PTP_RC, 0, \"PTP_RC_StoreNotAvailable\", 0x2013}, {PTP_RC, 0, \"PTP_RC_SpecByFormatUnsupported\", 0x2014}, {PTP_RC, 0, \"PTP_RC_NoValidObjectInfo\", 0x2015}, {PTP_RC, 0, \"PTP_RC_InvalidCodeFormat\", 0x2016}, {PTP_RC, 0, \"PTP_RC_UnknownVendorCode\", 0x2017}, {PTP_RC, 0, \"PTP_RC_CaptureAlreadyTerminated\", 0x2018}, {PTP_RC, 0, \"PTP_RC_DeviceBusy\", 0x2019}, {PTP_RC, 0, \"PTP_RC_InvalidParentObject\", 0x201A}, {PTP_RC, 0, \"PTP_RC_InvalidDevicePropFormat\", 0x201B}, {PTP_RC, 0, \"PTP_RC_InvalidDevicePropValue\", 0x201C}, {PTP_RC, 0, \"PTP_RC_InvalidParameter\", 0x201D}, {PTP_RC, 0, \"PTP_RC_SessionAlreadyOpened\", 0x201E}, {PTP_RC, 0, \"PTP_RC_TransactionCanceled\", 0x201F}, {PTP_RC, 0, \"PTP_RC_SpecOfDestinationUnsupported\", 0x2020}, {PTP_RC, 2, \"PTP_RC_CANON_Unknown\", 0xA001}, {PTP_RC, 2, \"PTP_RC_CANON_NotReady\", 0xA102}, {PTP_RC, 2, \"PTP_RC_CANON_BatteryLow\", 0xA101}, {PTP_RC, 0, \"PTP_RC_UndefinedMTP\", 0xA800}, {PTP_RC, 0, \"PTP_RC_InvalidObjPropCode\", 0xA801}, {PTP_RC, 0, \"PTP_RC_InvalidObjPropCodeFormat\", 0xA802}, {PTP_RC, 0, \"PTP_RC_InvalidObjPropCodeValue\", 0xA803}, {PTP_RC, 0, \"PTP_RC_InvalidObjReference\", 0xA804}, {PTP_RC, 0, \"PTP_RC_InvalidDataset\", 0xA806}, {PTP_RC, 0, \"PTP_RC_GroupSpecUnsupported\", 0xA807}, {PTP_RC, 0, \"PTP_RC_DepthSpecUnsupported\", 0xA808}, {PTP_RC, 0, \"PTP_RC_ObjectTooLarge\", 0xA809}, {PTP_RC, 0, \"PTP_RC_ObjectPropUnsupported\", 0xA80A}, {PTP_EC, 0, \"PTP_EC_Undefined\", 0x4000}, {PTP_EC, 0, \"PTP_EC_CancelTransaction\", 0x4001}, {PTP_EC, 0, \"PTP_EC_ObjectAdded\", 0x4002}, {PTP_EC, 0, \"PTP_EC_ObjectRemoved\", 0x4003}, {PTP_EC, 0, \"PTP_EC_StoreAdded\", 0x4004}, {PTP_EC, 0, \"PTP_EC_StoreRemoved\", 0x4005}, {PTP_EC, 0, \"PTP_EC_DevicePropChanged\", 0x4006}, {PTP_EC, 0, \"PTP_EC_ObjectInfoChanged\", 0x4007}, {PTP_EC, 0, \"PTP_EC_DeviceInfoChanged\", 0x4008}, {PTP_EC, 0, \"PTP_EC_RequestObjectTransfer\", 0x4009}, {PTP_EC, 0, \"PTP_EC_StoreFull\", 0x400A}, {PTP_EC, 0, \"PTP_EC_DeviceReset\", 0x400B}, {PTP_EC, 0, \"PTP_EC_StorageInfoChanged\", 0x400C}, {PTP_EC, 0, \"PTP_EC_CaptureComplete\", 0x400D}, {PTP_EC, 0, \"PTP_EC_UnreportedStatus\", 0x400E}, {PTP_EC, 0, \"PTP_EC_Canon_RequestObjectTransfer\", 0xC009}, {PTP_EC, 1, \"PTP_EC_EOS_RequestGetEvent\", 0xC101}, {PTP_EC, 1, \"PTP_EC_EOS_ObjectAddedEx\", 0xC181}, {PTP_EC, 1, \"PTP_EC_EOS_ObjectRemoved\", 0xC182}, {PTP_EC, 1, \"PTP_EC_EOS_RequestGetObjectInfoEx\", 0xC183}, {PTP_EC, 1, \"PTP_EC_EOS_StorageStatusChanged\", 0xC184}, {PTP_EC, 1, \"PTP_EC_EOS_StorageInfoChanged\", 0xC185}, {PTP_EC, 1, \"PTP_EC_EOS_RequestObjectTransfer\", 0xc186}, {PTP_EC, 1, \"PTP_EC_EOS_ObjectInfoChangedEx\", 0xC187}, {PTP_EC, 1, \"PTP_EC_EOS_ObjectContentChanged\", 0xC188}, {PTP_EC, 1, \"PTP_EC_EOS_PropValueChanged\", 0xC189}, {PTP_EC, 1, \"PTP_EC_EOS_AvailListChanged\", 0xC18A}, {PTP_EC, 1, \"PTP_EC_EOS_CameraStatusChanged\", 0xC18B}, {PTP_EC, 1, \"PTP_EC_EOS_WillSoonShutdown\", 0xC18D}, {PTP_EC, 1, \"PTP_EC_EOS_ShutdownTimerUpdated\", 0xC18E}, {PTP_EC, 1, \"PTP_EC_EOS_RequestCancelTransfer\", 0xC18F}, {PTP_EC, 1, \"PTP_EC_EOS_RequestObjectTransferDT\", 0xC190}, {PTP_EC, 1, \"PTP_EC_EOS_RequestCancelTransferDT\", 0xC191}, {PTP_EC, 1, \"PTP_EC_EOS_StoreAdded\", 0xC192}, {PTP_EC, 1, \"PTP_EC_EOS_StoreRemoved\", 0xC193}, {PTP_EC, 1, \"PTP_EC_EOS_BulbExposureTime\", 0xC194}, {PTP_EC, 1, \"PTP_EC_EOS_RecordingTime\", 0xC195}, {PTP_EC, 1, \"PTP_EC_EOS_RequestObjectTransferTS\", 0xC1A2}, {PTP_EC, 1, \"PTP_EC_EOS_AfResult\", 0xC1A3}, {PTP_EC, 1, \"PTP_EC_EOS_InfoCheckComplete\", 0xC1A4}, {PTP_EC, 0, \"PTP_EC_Nikon_ObjectAddedInSDRAM\", 0xC101}, {PTP_EC, 0, \"PTP_EC_Nikon_CaptureCompleteRecInSdram\", 0xC102}, {PTP_OF, 0, \"PTP_OF_Undefined\", 0x3000}, {PTP_OF, 0, \"PTP_OF_Association\", 0x3001}, {PTP_OF, 0, \"PTP_OF_Script\", 0x3002}, {PTP_OF, 0, \"PTP_OF_Executable\", 0x3003}, {PTP_OF, 0, \"PTP_OF_Text\", 0x3004}, {PTP_OF, 0, \"PTP_OF_HTML\", 0x3005}, {PTP_OF, 0, \"PTP_OF_DPOF\", 0x3006}, {PTP_OF, 0, \"PTP_OF_AIFF\", 0x3007}, {PTP_OF, 0, \"PTP_OF_WAV\", 0x3008}, {PTP_OF, 0, \"PTP_OF_MP3\", 0x3009}, {PTP_OF, 0, \"PTP_OF_AVI\", 0x300A}, {PTP_OF, 0, \"PTP_OF_MPEG\", 0x300B}, {PTP_OF, 0, \"PTP_OF_ASF\", 0x300C}, {PTP_OF, 0, \"PTP_OF_MOV\", 0x300D}, {PTP_OF, 0, \"PTP_OF_JPEG\", 0x3801}, {PTP_OF, 0, \"PTP_OF_TIFF_EP\", 0x3802}, {PTP_OF, 0, \"PTP_OF_FlashPix\", 0x3803}, {PTP_OF, 0, \"PTP_OF_BMP\", 0x3804}, {PTP_OF, 0, \"PTP_OF_CIFF\", 0x3805}, {PTP_OF, 0, \"PTP_OF_Reserved2\", 0x3806}, {PTP_OF, 0, \"PTP_OF_GIF\", 0x3807}, {PTP_OF, 0, \"PTP_OF_JFIF\", 0x3808}, {PTP_OF, 0, \"PTP_OF_PCD\", 0x3809}, {PTP_OF, 0, \"PTP_OF_PICT\", 0x380A}, {PTP_OF, 0, \"PTP_OF_PNG\", 0x380B}, {PTP_OF, 0, \"PTP_OF_Reserved1\", 0x380C}, {PTP_OF, 0, \"PTP_OF_TIFF\", 0x380D}, {PTP_OF, 0, \"PTP_OF_TIFF_IT\", 0x380E}, {PTP_OF, 0, \"PTP_OF_JP2\", 0x380F}, {PTP_OF, 0, \"PTP_OF_JPX\", 0x3810}, {PTP_OF, 0, \"PTP_OF_Firmware\", 0xB802}, {PTP_OF, 0, \"PTP_OF_WIF\", 0xB881}, {PTP_OF, 0, \"PTP_OF_Audio\", 0xB900}, {PTP_OF, 0, \"PTP_OF_WMA\", 0xb901}, {PTP_OF, 0, \"PTP_OF_OGG\", 0xb902}, {PTP_OF, 0, \"PTP_OF_AAC\", 0xb903}, {PTP_OF, 0, \"PTP_OF_Audible\", 0xb904}, {PTP_OF, 0, \"PTP_OF_FLAC\", 0xb906}, {PTP_OF, 0, \"PTP_OF_SamsungPlaylist\", 0xb909}, {PTP_OF, 0, \"PTP_OF_Video\", 0xb980}, {PTP_OF, 0, \"PTP_OF_WMV\", 0xb981}, {PTP_OF, 0, \"PTP_OF_MP4\", 0xb982}, {PTP_OF, 0, \"PTP_OF_3GP\", 0xb984}, {PTP_OF, 0, \"PTP_OF_MP2\", 0xb983}, {PTP_ENUM, 0, \"PTP_OPC_StorageID\", 0xDC01}, {PTP_ENUM, 0, \"PTP_OPC_ObjectFormat\", 0xDC02}, {PTP_ENUM, 0, \"PTP_OPC_ProtectionStatus\", 0xDC03}, {PTP_ENUM, 0, \"PTP_OPC_ObjectSize\", 0xDC04}, {PTP_ENUM, 0, \"PTP_OPC_AssociationType\", 0xDC05}, {PTP_ENUM, 0, \"PTP_OPC_AssociationDesc\", 0xDC06}, {PTP_ENUM, 0, \"PTP_OPC_ObjectFileName\", 0xDC07}, {PTP_ENUM, 0, \"PTP_OPC_DateCreated\", 0xDC08}, {PTP_ENUM, 0, \"PTP_OPC_DateModified\", 0xDC09}, {PTP_ENUM, 0, \"PTP_OPC_Keywords\", 0xDC0A}, {PTP_ENUM, 0, \"PTP_OPC_ParentObject\", 0xDC0B}, {PTP_ENUM, 0, \"PTP_OPC_AllowedFolderContents\", 0xDC0C}, {PTP_ENUM, 0, \"PTP_OPC_Hidden\", 0xDC0D}, {PTP_ENUM, 0, \"PTP_OPC_SystemObject\", 0xDC0E}, {PTP_ENUM, 0, \"PTP_OPC_PersistantUniqueObjectIdentifier\", 0xDC41}, {PTP_ENUM, 0, \"PTP_OPC_SyncID\", 0xDC42}, {PTP_ENUM, 0, \"PTP_OPC_PropertyBag\", 0xDC43}, {PTP_ENUM, 0, \"PTP_OPC_Name\", 0xDC44}, {PTP_ENUM, 0, \"PTP_OPC_CreatedBy\", 0xDC45}, {PTP_ENUM, 0, \"PTP_OPC_Artist\", 0xDC46}, {PTP_ENUM, 0, \"PTP_OPC_DateAuthored\", 0xDC47}, {PTP_ENUM, 0, \"PTP_OPC_Description\", 0xDC48}, {PTP_ENUM, 0, \"PTP_OPC_URLReference\", 0xDC49}, {PTP_ENUM, 0, \"PTP_OPC_LanguageLocale\", 0xDC4A}, {PTP_ENUM, 0, \"PTP_OPC_CopyrightInformation\", 0xDC4B}, {PTP_ENUM, 0, \"PTP_OPC_Source\", 0xDC4C}, {PTP_ENUM, 0, \"PTP_OPC_OriginLocation\", 0xDC4D}, {PTP_ENUM, 0, \"PTP_OPC_DateAdded\", 0xDC4E}, {PTP_ENUM, 0, \"PTP_OPC_NonConsumable\", 0xDC4F}, {PTP_ENUM, 0, \"PTP_OPC_CorruptOrUnplayable\", 0xDC50}, {PTP_ENUM, 0, \"PTP_OPC_ProducerSerialNumber\", 0xDC51}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleFormat\", 0xDC81}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleSize\", 0xDC82}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleHeight\", 0xDC83}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleWidth\", 0xDC84}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleDuration\", 0xDC85}, {PTP_ENUM, 0, \"PTP_OPC_RepresentativeSampleData\", 0xDC86}, {PTP_ENUM, 0, \"PTP_OPC_Width\", 0xDC87}, {PTP_ENUM, 0, \"PTP_OPC_Height\", 0xDC88}, {PTP_ENUM, 0, \"PTP_OPC_Duration\", 0xDC89}, {PTP_ENUM, 0, \"PTP_OPC_Rating\", 0xDC8A}, {PTP_ENUM, 0, \"PTP_OPC_Track\", 0xDC8B}, {PTP_ENUM, 0, \"PTP_OPC_Genre\", 0xDC8C}, {PTP_ENUM, 0, \"PTP_OPC_Credits\", 0xDC8D}, {PTP_ENUM, 0, \"PTP_OPC_Lyrics\", 0xDC8E}, {PTP_ENUM, 0, \"PTP_OPC_SubscriptionContentID\", 0xDC8F}, {PTP_ENUM, 0, \"PTP_OPC_ProducedBy\", 0xDC90}, {PTP_ENUM, 0, \"PTP_OPC_UseCount\", 0xDC91}, {PTP_ENUM, 0, \"PTP_OPC_SkipCount\", 0xDC92}, {PTP_ENUM, 0, \"PTP_OPC_LastAccessed\", 0xDC93}, {PTP_ENUM, 0, \"PTP_OPC_ParentalRating\", 0xDC94}, {PTP_ENUM, 0, \"PTP_OPC_MetaGenre\", 0xDC95}, {PTP_ENUM, 0, \"PTP_OPC_Composer\", 0xDC96}, {PTP_ENUM, 0, \"PTP_OPC_EffectiveRating\", 0xDC97}, {PTP_ENUM, 0, \"PTP_OPC_Subtitle\", 0xDC98}, {PTP_ENUM, 0, \"PTP_OPC_OriginalReleaseDate\", 0xDC99}, {PTP_ENUM, 0, \"PTP_OPC_AlbumName\", 0xDC9A}, {PTP_ENUM, 0, \"PTP_OPC_AlbumArtist\", 0xDC9B}, {PTP_ENUM, 0, \"PTP_OPC_Mood\", 0xDC9C}, {PTP_ENUM, 0, \"PTP_OPC_DRMStatus\", 0xDC9D}, {PTP_ENUM, 0, \"PTP_OPC_SubDescription\", 0xDC9E}, {PTP_ENUM, 0, \"PTP_OPC_IsCropped\", 0xDCD1}, {PTP_ENUM, 0, \"PTP_OPC_IsColorCorrected\", 0xDCD2}, {PTP_ENUM, 0, \"PTP_OPC_ImageBitDepth\", 0xDCD3}, {PTP_ENUM, 0, \"PTP_OPC_Fnumber\", 0xDCD4}, {PTP_ENUM, 0, \"PTP_OPC_ExposureTime\", 0xDCD5}, {PTP_ENUM, 0, \"PTP_OPC_ExposureIndex\", 0xDCD6}, {PTP_ENUM, 0, \"PTP_OPC_DisplayName\", 0xDCE0}, {PTP_ENUM, 0, \"PTP_OPC_BodyText\", 0xDCE1}, {PTP_ENUM, 0, \"PTP_OPC_Subject\", 0xDCE2}, {PTP_ENUM, 0, \"PTP_OPC_Priority\", 0xDCE3}, {PTP_ENUM, 0, \"PTP_OPC_GivenName\", 0xDD00}, {PTP_ENUM, 0, \"PTP_OPC_MiddleNames\", 0xDD01}, {PTP_ENUM, 0, \"PTP_OPC_FamilyName\", 0xDD02}, {PTP_ENUM, 0, \"PTP_OPC_Prefix\", 0xDD03}, {PTP_ENUM, 0, \"PTP_OPC_Suffix\", 0xDD04}, {PTP_ENUM, 0, \"PTP_OPC_PhoneticGivenName\", 0xDD05}, {PTP_ENUM, 0, \"PTP_OPC_PhoneticFamilyName\", 0xDD06}, {PTP_ENUM, 0, \"PTP_OPC_EmailPrimary\", 0xDD07}, {PTP_ENUM, 0, \"PTP_OPC_EmailPersonal1\", 0xDD08}, {PTP_ENUM, 0, \"PTP_OPC_EmailPersonal2\", 0xDD09}, {PTP_ENUM, 0, \"PTP_OPC_EmailBusiness1\", 0xDD0A}, {PTP_ENUM, 0, \"PTP_OPC_EmailBusiness2\", 0xDD0B}, {PTP_ENUM, 0, \"PTP_OPC_EmailOthers\", 0xDD0C}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberPrimary\", 0xDD0D}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberPersonal\", 0xDD0E}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberPersonal2\", 0xDD0F}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberBusiness\", 0xDD10}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberBusiness2\", 0xDD11}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberMobile\", 0xDD12}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberMobile2\", 0xDD13}, {PTP_ENUM, 0, \"PTP_OPC_FaxNumberPrimary\", 0xDD14}, {PTP_ENUM, 0, \"PTP_OPC_FaxNumberPersonal\", 0xDD15}, {PTP_ENUM, 0, \"PTP_OPC_FaxNumberBusiness\", 0xDD16}, {PTP_ENUM, 0, \"PTP_OPC_PagerNumber\", 0xDD17}, {PTP_ENUM, 0, \"PTP_OPC_PhoneNumberOthers\", 0xDD18}, {PTP_ENUM, 0, \"PTP_OPC_PrimaryWebAddress\", 0xDD19}, {PTP_ENUM, 0, \"PTP_OPC_PersonalWebAddress\", 0xDD1A}, {PTP_ENUM, 0, \"PTP_OPC_BusinessWebAddress\", 0xDD1B}, {PTP_ENUM, 0, \"PTP_OPC_InstantMessengerAddress\", 0xDD1C}, {PTP_ENUM, 0, \"PTP_OPC_InstantMessengerAddress2\", 0xDD1D}, {PTP_ENUM, 0, \"PTP_OPC_InstantMessengerAddress3\", 0xDD1E}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFull\", 0xDD1F}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullLine1\", 0xDD20}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullLine2\", 0xDD21}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullCity\", 0xDD22}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullRegion\", 0xDD23}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullPostalCode\", 0xDD24}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressPersonalFullCountry\", 0xDD25}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessFull\", 0xDD26}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessLine1\", 0xDD27}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessLine2\", 0xDD28}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessCity\", 0xDD29}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessRegion\", 0xDD2A}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessPostalCode\", 0xDD2B}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressBusinessCountry\", 0xDD2C}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherFull\", 0xDD2D}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherLine1\", 0xDD2E}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherLine2\", 0xDD2F}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherCity\", 0xDD30}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherRegion\", 0xDD31}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherPostalCode\", 0xDD32}, {PTP_ENUM, 0, \"PTP_OPC_PostalAddressOtherCountry\", 0xDD33}, {PTP_ENUM, 0, \"PTP_OPC_OrganizationName\", 0xDD34}, {PTP_ENUM, 0, \"PTP_OPC_PhoneticOrganizationName\", 0xDD35}, {PTP_ENUM, 0, \"PTP_OPC_Role\", 0xDD36}, {PTP_ENUM, 0, \"PTP_OPC_Birthdate\", 0xDD37}, {PTP_ENUM, 0, \"PTP_OPC_MessageTo\", 0xDD40}, {PTP_ENUM, 0, \"PTP_OPC_MessageCC\", 0xDD41}, {PTP_ENUM, 0, \"PTP_OPC_MessageBCC\", 0xDD42}, {PTP_ENUM, 0, \"PTP_OPC_MessageRead\", 0xDD43}, {PTP_ENUM, 0, \"PTP_OPC_MessageReceivedTime\", 0xDD44}, {PTP_ENUM, 0, \"PTP_OPC_MessageSender\", 0xDD45}, {PTP_ENUM, 0, \"PTP_OPC_ActivityBeginTime\", 0xDD50}, {PTP_ENUM, 0, \"PTP_OPC_ActivityEndTime\", 0xDD51}, {PTP_ENUM, 0, \"PTP_OPC_ActivityLocation\", 0xDD52}, {PTP_ENUM, 0, \"PTP_OPC_ActivityRequiredAttendees\", 0xDD54}, {PTP_ENUM, 0, \"PTP_OPC_ActivityOptionalAttendees\", 0xDD55}, {PTP_ENUM, 0, \"PTP_OPC_ActivityResources\", 0xDD56}, {PTP_ENUM, 0, \"PTP_OPC_ActivityAccepted\", 0xDD57}, {PTP_ENUM, 0, \"PTP_OPC_Owner\", 0xDD5D}, {PTP_ENUM, 0, \"PTP_OPC_Editor\", 0xDD5E}, {PTP_ENUM, 0, \"PTP_OPC_Webmaster\", 0xDD5F}, {PTP_ENUM, 0, \"PTP_OPC_URLSource\", 0xDD60}, {PTP_ENUM, 0, \"PTP_OPC_URLDestination\", 0xDD61}, {PTP_ENUM, 0, \"PTP_OPC_TimeBookmark\", 0xDD62}, {PTP_ENUM, 0, \"PTP_OPC_ObjectBookmark\", 0xDD63}, {PTP_ENUM, 0, \"PTP_OPC_ByteBookmark\", 0xDD64}, {PTP_ENUM, 0, \"PTP_OPC_LastBuildDate\", 0xDD70}, {PTP_ENUM, 0, \"PTP_OPC_TimetoLive\", 0xDD71}, {PTP_ENUM, 0, \"PTP_OPC_MediaGUID\", 0xDD72}, {PTP_ENUM, 0, \"PTP_OPC_TotalBitRate\", 0xDE91}, {PTP_ENUM, 0, \"PTP_OPC_BitRateType\", 0xDE92}, {PTP_ENUM, 0, \"PTP_OPC_SampleRate\", 0xDE93}, {PTP_ENUM, 0, \"PTP_OPC_NumberOfChannels\", 0xDE94}, {PTP_ENUM, 0, \"PTP_OPC_AudioBitDepth\", 0xDE95}, {PTP_ENUM, 0, \"PTP_OPC_ScanDepth\", 0xDE97}, {PTP_ENUM, 0, \"PTP_OPC_AudioWAVECodec\", 0xDE99}, {PTP_ENUM, 0, \"PTP_OPC_AudioBitRate\", 0xDE9A}, {PTP_ENUM, 0, \"PTP_OPC_VideoFourCCCodec\", 0xDE9B}, {PTP_ENUM, 0, \"PTP_OPC_VideoBitRate\", 0xDE9C}, {PTP_ENUM, 0, \"PTP_OPC_FramesPerThousandSeconds\", 0xDE9D}, {PTP_ENUM, 0, \"PTP_OPC_KeyFrameDistance\", 0xDE9E}, {PTP_ENUM, 0, \"PTP_OPC_BufferSize\", 0xDE9F}, {PTP_ENUM, 0, \"PTP_OPC_EncodingQuality\", 0xDEA0}, {PTP_ENUM, 0, \"PTP_OPC_EncodingProfile\", 0xDEA1}, {PTP_ENUM, 0, \"PTP_OPC_BuyFlag\", 0xD901}, {PTP_OF, 2, \"PTP_OF_CANON_CRW\", 0xb101}, {PTP_OF, 0, \"PTP_OF_RAW\", 0xb103}, {PTP_OF, 2, \"PTP_OF_CANON_MOV\", 0xb104}, {PTP_ENUM, 0, \"PTP_AT_Folder\", 0x1}, {PTP_ENUM, 0, \"PTP_AT_Album\", 0x1}, {PTP_ENUM, 0, \"PTP_DPC_BatteryLevel\", 0x5001}, {PTP_ENUM, 0, \"PTP_DPC_FunctionalMode\", 0x5002}, {PTP_ENUM, 0, \"PTP_DPC_ImageSize\", 0x5003}, {PTP_ENUM, 0, \"PTP_DPC_CompressionSetting\", 0x5004}, {PTP_ENUM, 0, \"PTP_DPC_WhiteBalance\", 0x5005}, {PTP_ENUM, 0, \"PTP_DPC_RGBGain\", 0x5006}, {PTP_ENUM, 0, \"PTP_DPC_FNumber\", 0x5007}, {PTP_ENUM, 0, \"PTP_DPC_FocalLength\", 0x5008}, {PTP_ENUM, 0, \"PTP_DPC_FocalDistance\", 0x5009}, {PTP_ENUM, 0, \"PTP_DPC_FocusMode\", 0x500A}, {PTP_ENUM, 0, \"PTP_DPC_ExposureMeteringMode\", 0x500B}, {PTP_ENUM, 0, \"PTP_DPC_FlashMode\", 0x500C}, {PTP_ENUM, 0, \"PTP_DPC_ExposureTime\", 0x500D}, {PTP_ENUM, 0, \"PTP_DPC_ExposureProgramMode\", 0x500E}, {PTP_ENUM, 0, \"PTP_DPC_ExposureIndex\", 0x500F}, {PTP_ENUM, 0, \"PTP_DPC_ExposureBiasCompensation\", 0x5010}, {PTP_ENUM, 0, \"PTP_DPC_DateTime\", 0x5011}, {PTP_ENUM, 0, \"PTP_DPC_CaptureDelay\", 0x5012}, {PTP_ENUM, 0, \"PTP_DPC_StillCaptureMode\", 0x5013}, {PTP_ENUM, 0, \"PTP_DPC_Contrast\", 0x5014}, {PTP_ENUM, 0, \"PTP_DPC_Sharpness\", 0x5015}, {PTP_ENUM, 0, \"PTP_DPC_DigitalZoom\", 0x5016}, {PTP_ENUM, 0, \"PTP_DPC_EffectMode\", 0x5017}, {PTP_ENUM, 0, \"PTP_DPC_BurstNumber\", 0x5018}, {PTP_ENUM, 0, \"PTP_DPC_BurstInterval\", 0x5019}, {PTP_ENUM, 0, \"PTP_DPC_TimelapseNumber\", 0x501A}, {PTP_ENUM, 0, \"PTP_DPC_TimelapseInterval\", 0x501B}, {PTP_ENUM, 0, \"PTP_DPC_FocusMeteringMode\", 0x501C}, {PTP_ENUM, 0, \"PTP_DPC_UploadURL\", 0x501D}, {PTP_ENUM, 0, \"PTP_DPC_Artist\", 0x501E}, {PTP_ENUM, 0, \"PTP_DPC_CopyrightInfo\", 0x501F}, {PTP_ENUM, 0, \"PTP_DPC_SupportedStreams\", 0x5020}, {PTP_ENUM, 0, \"PTP_DPC_EnabledStreams\", 0x5021}, {PTP_ENUM, 0, \"PTP_DPC_VideoFormat\", 0x5022}, {PTP_ENUM, 0, \"PTP_DPC_VideoResolution\", 0x5023}, {PTP_ENUM, 0, \"PTP_DPC_VideoQuality\", 0x5024}, {PTP_ENUM, 0, \"PTP_DPC_VideoFrameRate\", 0x5025}, {PTP_ENUM, 0, \"PTP_DPC_VideoContrast\", 0x5026}, {PTP_ENUM, 0, \"PTP_DPC_VideoBrightness\", 0x5027}, {PTP_ENUM, 0, \"PTP_DPC_AudioFormat\", 0x5028}, {PTP_ENUM, 0, \"PTP_DPC_AudioBitrate\", 0x5029}, {PTP_ENUM, 0, \"PTP_DPC_AudioSamplingRate\", 0x502A}, {PTP_ENUM, 0, \"PTP_DPC_AudioBitPerSample\", 0x502B}, {PTP_ENUM, 0, \"PTP_DPC_AudioVolume\", 0x502C}, {PTP_ENUM, 0, \"PTP_DPC_CANON_BeepCode\", 0xD001}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ViewFinderMode\", 0xD003}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ImageQuality\", 0xD006}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ImageSize\", 0xD008}, {PTP_ENUM, 0, \"PTP_DPC_CANON_FlashMode\", 0xD00a}, {PTP_ENUM, 0, \"PTP_DPC_CANON_TvAvSetting\", 0xD00c}, {PTP_ENUM, 0, \"PTP_DPC_CANON_MeteringMode\", 0xd010}, {PTP_ENUM, 0, \"PTP_DPC_CANON_MacroMode\", 0xd011}, {PTP_ENUM, 0, \"PTP_DPC_CANON_FocusingPoint\", 0xd012}, {PTP_ENUM, 0, \"PTP_DPC_CANON_WhiteBalance\", 0xd013}, {PTP_ENUM, 0, \"PTP_DPC_CANON_AFMode\", 0xD015}, {PTP_ENUM, 0, \"PTP_DPC_CANON_Contrast\", 0xD017}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ISOSpeed\", 0xd01c}, {PTP_ENUM, 0, \"PTP_DPC_CANON_Aperture\", 0xd01c}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ShutterSpeed\", 0xd01e}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ExpComp\", 0xd01f}, {PTP_ENUM, 0, \"PTP_DPC_CANON_Zoom\", 0xd02a}, {PTP_ENUM, 0, \"PTP_DPC_CANON_SizeQuality\", 0xd02c}, {PTP_ENUM, 0, \"PTP_DPC_CANON_FlashMemory\", 0xd031}, {PTP_ENUM, 0, \"PTP_DPC_CANON_CameraModel\", 0xd032}, {PTP_ENUM, 0, \"PTP_DPC_CANON_CameraOwner\", 0xd033}, {PTP_ENUM, 0, \"PTP_DPC_CANON_UnixTime\", 0xd032}, {PTP_ENUM, 0, \"PTP_DPC_CANON_ViewFinderOut\", 0xD036}, {PTP_ENUM, 0, \"PTP_DPC_CANON_RealImageWidth\", 0xD039}, {PTP_ENUM, 0, \"PTP_DPC_CANON_PhotoEffect\", 0xD040}, {PTP_ENUM, 0, \"PTP_DPC_CANON_AssistLight\", 0xD041}, {PTP_ENUM, 0, \"PTP_DPC_EOS_Aperture\", 0xD101}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ShutterSpeed\", 0xD102}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ISOSpeed\", 0xD103}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ExpCompensation\", 0xD104}, {PTP_ENUM, 0, \"PTP_DPC_EOS_AutoExposureMode\", 0xD105}, {PTP_ENUM, 0, \"PTP_DPC_EOS_DriveMode\", 0xD106}, {PTP_ENUM, 0, \"PTP_DPC_EOS_MeteringMode\", 0xD107}, {PTP_ENUM, 0, \"PTP_DPC_EOS_FocusMode\", 0xD108}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalance\", 0xD109}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ColorTemperature\", 0xD10A}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalanceAdjustA\", 0xD10B}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalanceAdjustB\", 0xD10C}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalanceXA\", 0xD10D}, {PTP_ENUM, 0, \"PTP_DPC_EOS_WhiteBalanceXB\", 0xD10E}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ColorSpace\", 0xD10F}, {PTP_ENUM, 0, \"PTP_DPC_EOS_PictureStyle\", 0xD110}, {PTP_ENUM, 0, \"PTP_DPC_EOS_BatteryPower\", 0xD111}, {PTP_ENUM, 0, \"PTP_DPC_EOS_BatterySelect\", 0xD112}, {PTP_ENUM, 0, \"PTP_DPC_EOS_CameraTime\", 0xD113}, {PTP_ENUM, 0, \"PTP_DPC_EOS_Owner\", 0xD115}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ModelID\", 0xD116}, {PTP_ENUM, 0, \"PTP_DPC_EOS_PTPExtensionVersion\", 0xD119}, {PTP_ENUM, 0, \"PTP_DPC_EOS_DPOFVersion\", 0xD11A}, {PTP_ENUM, 0, \"PTP_DPC_EOS_AvailableShots\", 0xD11B}, {PTP_ENUM, 0, \"PTP_DPC_EOS_CaptureDestination\", 0xD11C}, {PTP_ENUM, 0, \"PTP_DPC_EOS_CurrentFolder\", 0xD11F}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ImageFormat\", 0xD120}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ImageFormatCF\", 0xD121}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ImageFormatSD\", 0xD122}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ImageFormatExtHD\", 0xD123}, {PTP_ENUM, 0, \"PTP_DPC_EOS_AEModeDial\", 0xD138}, {PTP_ENUM, 0, \"PTP_DPC_EOS_ShutterCounter\", 0xD1AC}, {PTP_ENUM, 0, \"PTP_DPC_EOS_VF_Output\", 0xD1B0}, {PTP_ENUM, 0, \"PTP_DPC_EOS_EVFMode\", 0xD1B1}, {PTP_ENUM, 0, \"PTP_DPC_EOS_DOFPreview\", 0xD1B2}, {PTP_ENUM, 0, \"PTP_DPC_EOS_VFSharp\", 0xD1B3}, {PTP_ENUM, 0, \"PTP_DPC_EOS_EVFWBMode\", 0xD1B4}, {PTP_ENUM, 0, \"PTP_DPC_EOS_FocusInfoEx\", 0xD1D3}, {PTP_OC, 0, \"PTP_OC_ML_LiveBmpRam\", 0x9996}, {PTP_OC, 0, \"PTP_OC_ML_Live360x240\", 0x9997}, {PTP_OC, 0, \"PTP_OC_MagicLantern\", 0x9998}, {PTP_OC, 0, \"PTP_OC_CHDK\", 0x9999}, {PTP_ST, 0, \"PTP_ST_Undefined\", 0x0}, {PTP_ST, 0, \"PTP_ST_FixedROM\", 0x1}, {PTP_ST, 0, \"PTP_ST_RemovableROM\", 0x2}, {PTP_ST, 0, \"PTP_ST_FixedRAM\", 0x3}, {PTP_ST, 0, \"PTP_ST_RemovableRAM\", 0x4}, {PTP_FT, 0, \"PTP_FT_Undefined\", 0x0}, {PTP_FT, 0, \"PTP_FT_GenericFlat\", 0x1}, {PTP_FT, 0, \"PTP_FT_GenericHei\", 0x2}, {PTP_FT, 0, \"PTP_FT_DCF\", 0x3}, {PTP_AC, 0, \"PTP_AC_ReadWrite\", 0x0}, {PTP_AC, 0, \"PTP_AC_Read\", 0x1}, {PTP_AC, 0, \"PTP_AC_ReadDelete\", 0x2}, {PTP_ENUM, 0, \"PTP_TC_UNDEF\", 0x0}, {PTP_ENUM, 0, \"PTP_TC_INT8\", 0x1}, {PTP_ENUM, 0, \"PTP_TC_UINT8\", 0x2}, {PTP_ENUM, 0, \"PTP_TC_INT16\", 0x3}, {PTP_ENUM, 0, \"PTP_TC_UINT16\", 0x4}, {PTP_ENUM, 0, \"PTP_TC_INT32\", 0x5}, {PTP_ENUM, 0, \"PTP_TC_UINT32\", 0x6}, {PTP_ENUM, 0, \"PTP_TC_INT64\", 0x7}, {PTP_ENUM, 0, \"PTP_TC_UINT64\", 0x8}, {PTP_ENUM, 0, \"PTP_TC_INT128\", 0x9}, {PTP_ENUM, 0, \"PTP_TC_UINT128\", 0xA}, {PTP_ENUM, 0, \"PTP_TC_UINT8ARRAY\", 0x4002}, {PTP_ENUM, 0, \"PTP_TC_UINT16ARRAY\", 0x4004}, {PTP_ENUM, 0, \"PTP_TC_UINT32ARRAY\", 0x4006}, {PTP_ENUM, 0, \"PTP_TC_UINT64ARRAY\", 0x4008}, {PTP_ENUM, 0, \"PTP_TC_STRING\", 0xFFFF}, {PTP_ENUM, 0, \"PTP_RangeForm\", 0x1}, {PTP_ENUM, 0, \"PTP_EnumerationForm\", 0x2}, {PTP_ENUM, 0, \"PTPIP_INIT_COMMAND_REQ\", 0x1}, {PTP_ENUM, 0, \"PTPIP_INIT_COMMAND_ACK\", 0x2}, {PTP_ENUM, 0, \"PTPIP_INIT_EVENT_REQ\", 0x3}, {PTP_ENUM, 0, \"PTPIP_INIT_EVENT_ACK\", 0x4}, {PTP_ENUM, 0, \"PTPIP_INIT_FAIL\", 0x5}, {PTP_ENUM, 0, \"PTPIP_COMMAND_REQUEST\", 0x6}, {PTP_ENUM, 0, \"PTPIP_COMMAND_RESPONSE\", 0x7}, {PTP_ENUM, 0, \"PTPIP_EVENT\", 0x8}, {PTP_ENUM, 0, \"PTPIP_DATA_PACKET_START\", 0x9}, {PTP_ENUM, 0, \"PTPIP_DATA_PACKET\", 0xA}, {PTP_ENUM, 0, \"PTPIP_CANCEL_TRANSACTION\", 0xB}, {PTP_ENUM, 0, \"PTPIP_DATA_PACKET_END\", 0xC}, {PTP_ENUM, 0, \"PTPIP_PING\", 0xD}, {PTP_ENUM, 0, \"PTPIP_PONG\", 0xE}, {PTP_ENUM, 0, \"USB_VENDOR_CANON\", 0x4A9}, {PTP_ENUM, 0, \"MTP_REQ_CANCEL\", 0x64}, {PTP_ENUM, 0, \"MTP_REQ_GET_EXT_EVENT_DATA\", 0x65}, {PTP_ENUM, 0, \"USB_REQ_RESET\", 0x66}, {PTP_ENUM, 0, \"USB_REQ_STATUS\", 0x67}, {PTP_ENUM, 0, \"USB_REQ_GET_STATUS\", 0x00}, {PTP_ENUM, 0, \"USB_REQ_CLEAR_FEATURE\", 0x01}, {PTP_ENUM, 0, \"USB_REQ_SET_FEATURE\", 0x03}, {PTP_ENUM, 0, \"USB_DP_HTD\", 0x0}, {PTP_ENUM, 0, \"USB_DP_DTH\", 0x80}, {PTP_ENUM, 0, \"USB_RECIP_DEVICE\", 0x00}, {PTP_ENUM, 0, \"USB_RECIP_INTERFACE\", 0x01}, {PTP_ENUM, 0, \"USB_RECIP_ENDPOINT\", 0x02}, {PTP_ENUM, 0, \"USB_TYPE_CLASS\", 0x20}, }; int ptp_enums_length = 560;","title":"PTP Codes"},{"location":"ip/","text":"PTP/IP PTP/IP is the variant of PTP designed to be used on TCP. All packet types start with a length and type field. The layout of the rest of the fields depends on type . A standard request to the responder is as follows: 1. Send Command request struct PtpIpBulkContainer { uint32_t length; uint32_t type; uint32_t data_phase; uint16_t code; uint32_t transaction; uint32_t params[5]; }; Rules: Set length to 18 + (4 * number_of_params) Set type to PTPIP_COMMAND_REQUEST ( 0x6 ) Set the data_phase field to 2 if you are sending a data payload. Set to 1 if otherwise. Set code to a PTP_OC_ opcode. Set the transaction to the transaction ID for this operation. 2. Send Data Start packet struct PtpIpStartDataPacket { uint32_t length; uint32_t type; uint32_t transaction; uint64_t payload_length; }; Rules: Set length to 20 . Set type to PTPIP_DATA_PACKET_START ( 0x9 ) Set transaction to the transaction ID for this operation. Set data_phase_length to the size of the payload in the following data packet. 3. Send Data End Packet struct PtpIpEndDataPacket { uint32_t length; uint32_t type; uint32_t transaction; // payload data goes here }; Rules: Set length to 12 + payload_length Set type to PTPIP_DATA_PACKET_END ( 0xc ) Set data_phase_length to the size of the payload in the following data packet. Copy the payload that will be sent to the device at offset 12 . 4. Responses For an operation, you may get a data payload as a response (R->I) The response to an operation will either be: - PTPIP_DATA_PACKET_START packet followed by PTPIP_DATA_PACKET_END , and finally a PTPIP_COMMAND_RESPONSE packet - Just a PTPIP_COMMAND_RESPONSE packet Response Container struct PtpIpResponseContainer { uint32_t length; uint32_t type; uint16_t code; uint32_t transaction; uint32_t params[5]; };","title":"PTP/IP"},{"location":"ip/#ptpip","text":"PTP/IP is the variant of PTP designed to be used on TCP. All packet types start with a length and type field. The layout of the rest of the fields depends on type . A standard request to the responder is as follows:","title":"PTP/IP"},{"location":"ip/#1-send-command-request","text":"struct PtpIpBulkContainer { uint32_t length; uint32_t type; uint32_t data_phase; uint16_t code; uint32_t transaction; uint32_t params[5]; }; Rules: Set length to 18 + (4 * number_of_params) Set type to PTPIP_COMMAND_REQUEST ( 0x6 ) Set the data_phase field to 2 if you are sending a data payload. Set to 1 if otherwise. Set code to a PTP_OC_ opcode. Set the transaction to the transaction ID for this operation.","title":"1. Send Command request"},{"location":"ip/#2-send-data-start-packet","text":"struct PtpIpStartDataPacket { uint32_t length; uint32_t type; uint32_t transaction; uint64_t payload_length; }; Rules: Set length to 20 . Set type to PTPIP_DATA_PACKET_START ( 0x9 ) Set transaction to the transaction ID for this operation. Set data_phase_length to the size of the payload in the following data packet.","title":"2. Send Data Start packet"},{"location":"ip/#3-send-data-end-packet","text":"struct PtpIpEndDataPacket { uint32_t length; uint32_t type; uint32_t transaction; // payload data goes here }; Rules: Set length to 12 + payload_length Set type to PTPIP_DATA_PACKET_END ( 0xc ) Set data_phase_length to the size of the payload in the following data packet. Copy the payload that will be sent to the device at offset 12 .","title":"3. Send Data End Packet"},{"location":"ip/#4-responses","text":"For an operation, you may get a data payload as a response (R->I) The response to an operation will either be: - PTPIP_DATA_PACKET_START packet followed by PTPIP_DATA_PACKET_END , and finally a PTPIP_COMMAND_RESPONSE packet - Just a PTPIP_COMMAND_RESPONSE packet","title":"4. Responses"},{"location":"ip/#response-container","text":"struct PtpIpResponseContainer { uint32_t length; uint32_t type; uint16_t code; uint32_t transaction; uint32_t params[5]; };","title":"Response Container"}]}